j=1
MAPE = numeric()
a1 = numeric()
b1 = numeric()
c1 = numeric()
sales.ts.dev = head(sales.ts,138)
sales.ts.hold = head(sales.ts,10)
for(a in seq(from=0.1,to= 0.9,by=0.1)){
for(b in seq(from=0.1,to= 0.9,by=0.1)){
for(c in seq(from=0.1,to= 0.9,by=0.1)){
HW_Model = HoltWinters(sales.ts.dev, alpha=a, beta=b, gamma=c)
# hold_predict = forecast(HW_Model,10)
# MAPE[j] = sum(abs(hold_predict$mean-sales.ts.hold)/sales.ts.hold)/length(sales.ts.hold)
# a1[j] = a
# b1[j] = b
# c1[j] =c
# j = j+1
}
}
print(a)
}
HW_Model = HoltWinters(sales.ts.dev, alpha=0.5, beta=0.5, gamma=0.5)
hold_predict = forecast(HW_Model,10)
MAPE[j] = sum(abs(hold_predict$mean-sales.ts.hold)/sales.ts.hold)/length(sales.ts.hold)
hold_predict
hold_predict$mean
hold_predict[1]
hold_predict$mean[1:10]
sales.ts.hold
sales.ts.hold[1:10]
length(sales.ts.hold)
j=1
MAPE = numeric()
a1 = numeric()
b1 = numeric()
c1 = numeric()
sales.ts.dev = head(sales.ts,138)
sales.ts.hold = head(sales.ts,10)
for(a in seq(from=0.1,to= 0.9,by=0.1)){
for(b in seq(from=0.1,to= 0.9,by=0.1)){
for(c in seq(from=0.1,to= 0.9,by=0.1)){
HW_Model = HoltWinters(sales.ts.dev, alpha=0.5, beta=0.5, gamma=0.5)
hold_predict = forecast(HW_Model,10)
MAPE[j] = sum(abs(hold_predict$mean[1:10]-sales.ts.hold[1:10])/sales.ts.hold[1:10])/length(sales.ts.hold)
a1[j] = a
b1[j] = b
c1[j] =c
j = j+1
}
}
print(a)
}
temp = data.frame(x1 = MAPE, x2 = a1, x3 = b1, x4 = c1)
subset(temp, MAPE==min(MAPE))
j=1
MAPE = numeric()
a1 = numeric()
b1 = numeric()
c1 = numeric()
sales.ts.dev = head(sales.ts,138)
sales.ts.hold = head(sales.ts,10)
for(a in seq(from=0.1,to= 0.9,by=0.05)){
for(b in seq(from=0.1,to= 0.9,by=0.05)){
for(c in seq(from=0.1,to= 0.9,by=0.05)){
HW_Model = HoltWinters(sales.ts.dev, alpha=0.5, beta=0.5, gamma=0.5)
hold_predict = forecast(HW_Model,10)
MAPE[j] = sum(abs(hold_predict$mean[1:10]-sales.ts.hold[1:10])/sales.ts.hold[1:10])/length(sales.ts.hold)
a1[j] = a
b1[j] = b
c1[j] =c
j = j+1
}
}
print(a)
}
temp = data.frame(x1 = MAPE, x2 = a1, x3 = b1, x4 = c1)
subset(temp, MAPE==min(MAPE))
hold_predict$mean[1:10]
sales.ts.hold[1:10]
hold_predict$mean[1:10]-sales.ts.hold[1:10]
abs(hold_predict$mean[1:10]-sales.ts.hold[1:10])
abs(hold_predict$mean[1:10]-sales.ts.hold[1:10])/sales.ts.hold[1:10]
j=1
MAPE = numeric()
a1 = numeric()
b1 = numeric()
c1 = numeric()
sales.ts.dev = head(sales.ts,138)
sales.ts.hold = head(sales.ts,10)
for(a in seq(from=0.1,to= 0.9,by=0.05)){
for(b in seq(from=0.1,to= 0.9,by=0.05)){
for(c in seq(from=0.1,to= 0.9,by=0.05)){
HW_Model = HoltWinters(sales.ts.dev, alpha=a, beta=b, gamma=c)
hold_predict = forecast(HW_Model,10)
MAPE[j] = sum(abs(hold_predict$mean[1:10]-sales.ts.hold[1:10])/sales.ts.hold[1:10])/length(sales.ts.hold)
a1[j] = a
b1[j] = b
c1[j] =c
j = j+1
}
}
print(a)
}
temp = data.frame(x1 = MAPE, x2 = a1, x3 = b1, x4 = c1)
subset(temp, MAPE==min(MAPE))
j=1
MAPE = numeric()
a1 = numeric()
b1 = numeric()
c1 = numeric()
sales.ts.dev = head(sales.ts,138)
sales.ts.hold = head(sales.ts,10)
for(a in seq(from=0.1,to= 0.9,by=0.1)){
for(b in seq(from=0.1,to= 0.9,by=0.1)){
for(c in seq(from=0.1,to= 0.9,by=0.1)){
HW_Model = HoltWinters(sales.ts.dev, alpha=a, beta=b, gamma=c)
hold_predict = forecast(HW_Model,10)
MAPE[j] = sum(abs(hold_predict$mean[1:10]-sales.ts.hold[1:10])/sales.ts.hold[1:10])/length(sales.ts.hold)
a1[j] = a
b1[j] = b
c1[j] =c
j = j+1
}
}
print(a)
}
temp = data.frame(x1 = MAPE, x2 = a1, x3 = b1, x4 = c1)
subset(temp, MAPE==min(MAPE))
j=1
MAPE = numeric()
a1 = numeric()
b1 = numeric()
c1 = numeric()
sales.ts.dev = head(sales.ts,138)
sales.ts.hold = head(sales.ts,10)
for(a in seq(from=0.1,to= 0.9,by=0.05)){
for(b in seq(from=0.1,to= 0.9,by=0.05)){
for(c in seq(from=0.1,to= 0.9,by=0.05)){
HW_Model = HoltWinters(sales.ts.dev, alpha=a, beta=b, gamma=c)
hold_predict = forecast(HW_Model,10)
MAPE[j] = sum(abs(hold_predict$mean[1:10]-sales.ts.hold[1:10])/sales.ts.hold[1:10])/length(sales.ts.hold)
a1[j] = a
b1[j] = b
c1[j] =c
j = j+1
}
}
print(a)
}
temp = data.frame(x1 = MAPE, x2 = a1, x3 = b1, x4 = c1)
subset(temp, MAPE==min(MAPE))
temp = data.frame(MAPE = MAPE, alpha = a1, beta = b1, gamma = c1)
subset(temp, MAPE==min(MAPE))
sales.fit1= HoltWinters(sales.ts, alpha=0.1, beta=0.45, gamma=0.9)
plot(sales.fit1)
j=1
MAPE = numeric()
a1 = numeric()
b1 = numeric()
c1 = numeric()
sales.ts.dev = head(sales.ts,138)
sales.ts.hold = head(sales.ts,10)
for(a in seq(from=0.1,to= 0.9,by=0.1)){
for(b in seq(from=0.1,to= 0.9,by=0.1)){
for(c in seq(from=0.1,to= 0.9,by=0.1)){
HW_Model = HoltWinters(sales.ts.dev, alpha=a, beta=b, gamma=c)
hold_predict = forecast(HW_Model,10)
MAPE[j] = sum(abs(hold_predict$mean[1:10]-sales.ts.hold[1:10])/sales.ts.hold[1:10])/length(sales.ts.hold)
a1[j] = a
b1[j] = b
c1[j] =c
j = j+1
}
}
print(a)
}
temp = data.frame(MAPE = MAPE, alpha = a1, beta = b1, gamma = c1)
subset(temp, MAPE==min(MAPE))
sales.fit1= HoltWinters(sales.ts, alpha=0.2, beta=0.2, gamma=0.9)
plot(sales.fit1)
j=1
MAPE = numeric()
a1 = numeric()
b1 = numeric()
c1 = numeric()
sales.ts.dev = head(sales.ts,138)
sales.ts.hold = head(sales.ts,10)
for(a in seq(from=0.1,to= 0.9,by=0.1)){
for(b in seq(from=0.1,to= 0.9,by=0.1)){
for(c in seq(from=0.1,to= 0.9,by=0.1)){
HW_Model = HoltWinters(sales.ts.dev, alpha=a, beta=b, gamma=F)
hold_predict = forecast(HW_Model,10)
MAPE[j] = sum(abs(hold_predict$mean[1:10]-sales.ts.hold[1:10])/sales.ts.hold[1:10])/length(sales.ts.hold)
a1[j] = a
b1[j] = b
c1[j] =c
j = j+1
}
}
print(a)
}
temp = data.frame(MAPE = MAPE, alpha = a1, beta = b1, gamma = c1)
subset(temp, MAPE==min(MAPE))
sales.fit1= HoltWinters(sales.ts, alpha=0.2, beta=0.2, gamma=F)
plot(sales.fit1)
j=1
MAPE = numeric()
a1 = numeric()
b1 = numeric()
c1 = numeric()
sales.ts.dev = head(sales.ts,138)
sales.ts.hold = head(sales.ts,10)
for(a in seq(from=0.1,to= 0.9,by=0.1)){
for(b in seq(from=0.1,to= 0.9,by=0.1)){
for(c in seq(from=0.1,to= 0.9,by=0.1)){
HW_Model = HoltWinters(sales.ts.dev, alpha=a, beta=F, gamma=c)
hold_predict = forecast(HW_Model,10)
MAPE[j] = sum(abs(hold_predict$mean[1:10]-sales.ts.hold[1:10])/sales.ts.hold[1:10])/length(sales.ts.hold)
a1[j] = a
b1[j] = b
c1[j] =c
j = j+1
}
}
print(a)
}
temp = data.frame(MAPE = MAPE, alpha = a1, beta = b1, gamma = c1)
subset(temp, MAPE==min(MAPE))
sales.fit1= HoltWinters(sales.ts, alpha=0.4, beta=F, gamma=0.9)
plot(sales.fit1)
sales.fit1= HoltWinters(sales.ts, alpha=0.15, beta=F, gamma=0.66)
plot(sales.fit1)
sales.fit1= HoltWinters(sales.ts, alpha=0.4, beta=0.3, gamma=F)
plot(sales.fit1)
j=1
MAPE = numeric()
a1 = numeric()
b1 = numeric()
c1 = numeric()
sales.ts.dev = head(sales.ts,138)
sales.ts.hold = head(sales.ts,10)
for(a in seq(from=0.1,to= 0.9,by=0.1)){
for(b in seq(from=0.1,to= 0.9,by=0.1)){
for(c in seq(from=0.1,to= 0.9,by=0.1)){
HW_Model = HoltWinters(sales.ts.dev, alpha=a, beta=F, gamma=c)
hold_predict = forecast(HW_Model,10)
MAPE[j] = sum(abs(hold_predict$mean[1:10]-sales.ts.hold[1:10])/sales.ts.hold[1:10])/length(sales.ts.hold)
a1[j] = a
b1[j] = b
c1[j] =c
j = j+1
}
}
print(a)
}
temp = data.frame(MAPE = MAPE, alpha = a1, beta = b1, gamma = c1)
subset(temp, MAPE==min(MAPE))
j=1
MAPE = numeric()
a1 = numeric()
b1 = numeric()
c1 = numeric()
sales.ts.dev = head(sales.ts,138)
sales.ts.hold = head(sales.ts,10)
for(a in seq(from=0.1,to= 0.9,by=0.1)){
for(b in seq(from=0.1,to= 0.9,by=0.1)){
for(c in seq(from=0.1,to= 0.9,by=0.1)){
HW_Model = HoltWinters(sales.ts.dev, alpha=a, beta=b, gamma=c)
hold_predict = forecast(HW_Model,10)
MAPE[j] = sum(abs(hold_predict$mean[1:10]-sales.ts.hold[1:10])/sales.ts.hold[1:10])/length(sales.ts.hold)
a1[j] = a
b1[j] = b
c1[j] =c
j = j+1
}
}
print(a)
}
temp = data.frame(MAPE = MAPE, alpha = a1, beta = b1, gamma = c1)
subset(temp, MAPE==min(MAPE))
sales.fit1= HoltWinters(sales.ts, alpha=0.2, beta=0.2, gamma=0.9)
plot(sales.fit1)
library(forecast)
sales.fut= forecast(sales.fit1, 8)
sales.fut= forecast(sales.fit1, 18)
plot(sales.fut)
actual = tail(subs.new[2],8)
forcast = sales.fut$mean[10:18]
err=MAPE(actual$SPEND_SUM,forcast)
sales.fut= forecast(sales.fit1, 18)
plot(sales.fut)
actual = tail(subs.new[2],8)
forcast = sales.fut$mean[11:18]
err=MAPE(actual$SPEND_SUM,forcast)
err
j=1
MAPE = numeric()
a1 = numeric()
b1 = numeric()
c1 = numeric()
sales.ts.dev = head(sales.ts,143)
sales.ts.hold = head(sales.ts,5)
for(a in seq(from=0.1,to= 0.9,by=0.1)){
for(b in seq(from=0.1,to= 0.9,by=0.1)){
for(c in seq(from=0.1,to= 0.9,by=0.1)){
HW_Model = HoltWinters(sales.ts.dev, alpha=a, beta=b, gamma=c)
hold_predict = forecast(HW_Model,5)
MAPE[j] = sum(abs(hold_predict$mean[1:5]-sales.ts.hold[1:5])/sales.ts.hold[1:5])/length(sales.ts.hold)
a1[j] = a
b1[j] = b
c1[j] =c
j = j+1
}
}
print(a)
}
temp = data.frame(MAPE = MAPE, alpha = a1, beta = b1, gamma = c1)
subset(temp, MAPE==min(MAPE))
sales.fit1= HoltWinters(sales.ts, alpha=0.1, beta=0.4, gamma=0.8)
plot(sales.fit1)
library(forecast)
sales.fut= forecast(sales.fit1, 18)
plot(sales.fut)
actual = tail(subs.new[2],8)
forcast = sales.fut$mean[11:18]
err=MAPE(actual$SPEND_SUM,forcast)
err
j=1
MAPE = numeric()
a1 = numeric()
b1 = numeric()
c1 = numeric()
sales.ts.dev = head(sales.ts,143)
sales.ts.hold = head(sales.ts,5)
for(a in seq(from=0.1,to= 0.9,by=0.1)){
for(b in seq(from=0.1,to= 0.9,by=0.1)){
for(c in seq(from=0.1,to= 0.9,by=0.1)){
HW_Model = HoltWinters(sales.ts.dev, alpha=a, beta=b, gamma=c)
hold_predict = forecast(HW_Model,5)
MAPE[j] = sum(abs(hold_predict$mean[1:5]-sales.ts.hold[1:5])/sales.ts.hold[1:5])/length(sales.ts.hold)
a1[j] = a
b1[j] = b
c1[j] =c
j = j+1
}
}
print(a)
}
temp = data.frame(MAPE = MAPE, alpha = a1, beta = b1, gamma = c1)
subset(temp, MAPE==min(MAPE))
sales.fit1= HoltWinters(sales.ts, alpha=0.1, beta=0.4, gamma=0.8)
plot(sales.fit1)
plot(sales.comp,title(main="Decomposition of Sales"))
require(tseries)
adf.test(sales.ts/scale(sales.ts-sales.comp$seasonal), alternative = "stationary")
adf.test(sales.ts/(sales.ts-sales.comp$seasonal), alternative = "stationary")
names(data.work)
install.packages('ez')
require(ez)
names(data.work)
class(data.work$DISPLAY)
require(ez)
ezANOVA(data.work, dv=.(SPEND), between=.(as.factor(DISPLAY)), detailed=TRUE)
require(ez)
ezANOVA(data.work, dv=.(SPEND),wid=wid between=.(as.factor(DISPLAY)), detailed=TRUE)
require(ez)
ezANOVA(data.work, dv=.(SPEND),wid=wid, between=.(as.factor(DISPLAY)), detailed=TRUE)
require(ez)
ezANOVA(data.work, dv=.(SPEND),wid=.(S), between=.(as.factor(DISPLAY)), detailed=TRUE)
require(ez)
ezANOVA(data.work, dv=.(SPEND),wid=.(as.factor(DISPLAY)), between=.(as.factor(DISPLAY)), detailed=TRUE)
data.work$DISPLAY = as.factor(data.work$DISPLAY)
require(ez)
ezANOVA(data.work, dv=.(SPEND),wid=.(DISPLAY), between=.(DISPLAY), detailed=TRUE)
ezANOVA(data.work, dv=.(SPEND),wid=.(DISPLAY), detailed=TRUE)
anova( aov(SPEND ~ DISPLAY, data=data.work) )
require(foreign)
data_spss = read.spss(file = 'C:/Users/ravin/Documents/GitHub/Projects/IB-ICE/IB ICE.sav')
class(data_spss)
?read.spss
data_spss = read.spss(file = 'C:/Users/ravin/Documents/GitHub/Projects/IB-ICE/IB ICE.sav', to.data.frame = T)
class(data_spss)
str(data_spss)
data_spss$Layout_A = as.factor(data_spss$Layout_A)
data_spss$Layout_A = as.factor(data_spss$Layout_A)
anova( aov(IBProp ~ Layout_A, data=data_spss) )
anova( aov(SPEND ~ DISPLAY, data=data.work) )
anova( aov(IBProp ~ Layout_A, data=data_spss) )
test = data_spss %>%
select(Layout_A,IBProp) %>%
group_by(Layout_A) %>%
mutate (M = mean(IBProp))
unique(test)
unique(test[,c(1,3)])
test = data_spss %>%
select(Layout_A,IBProp) %>%
group_by(Layout_A) %>%
mutate (M = mean(IBProp, rm.na = F))
unique(test[,c(1,3)])
test = data_spss %>%
select(Layout_A,IBProp) %>%
group_by(Layout_A) %>%
mutate (M = mean(IBProp, rm.na = T))
unique(test[,c(1,3)])
test = data_spss %>%
select(Layout_A,IBProp) %>%
group_by(Layout_A) %>%
mutate (M = mean(IBProp, na.rm = T))
unique(test[,c(1,3)])
Mean_data.work = data_spss %>%
select(DISPLAY,SPEND) %>%
group_by(Layout_A) %>%
mutate (M = mean(SPEND, na.rm = T))
unique(Mean_data.work[,c(1,3)])
Mean_data.work = data.work %>%
select(DISPLAY,SPEND) %>%
group_by(Layout_A) %>%
mutate (M = mean(SPEND, na.rm = T))
Mean_data.work = data.work %>%
select(DISPLAY,SPEND) %>%
group_by(DISPLAY) %>%
mutate (M = mean(SPEND, na.rm = T))
unique(Mean_data.work[,c(1,3)])
data.work$DISPLAY = as.factor(data.work$DISPLAY)
require(ez)
anova( aov(SPEND ~ DISPLAY, data=data.work) )
Mean_data.work = data.work %>%
select(DISPLAY,SPEND) %>%
group_by(DISPLAY) %>%
mutate (M = mean(SPEND, na.rm = T))
unique(Mean_data.work[,c(1,3)])
d1=diff(sales.ts)
require(tseries)
adf.test(sales.ts/scale(sales.ts-sales.comp$seasonal), alternative = "stationary")
j=1
MAPE = numeric()
a1 = numeric()
b1 = numeric()
c1 = numeric()
sales.ts.dev = head(sales.ts,143)
sales.ts.hold = head(sales.ts,5)
for(a in seq(from=0.1,to= 0.9,by=0.1)){
for(b in seq(from=0.1,to= 0.9,by=0.1)){
for(c in seq(from=0.1,to= 0.9,by=0.1)){
HW_Model = HoltWinters(sales.ts.dev, alpha=a, beta=b, gamma=c)
hold_predict = forecast(HW_Model,5)
MAPE[j] = sum(abs(hold_predict$mean[1:5]-sales.ts.hold[1:5])/sales.ts.hold[1:5])/length(sales.ts.hold)
a1[j] = a
b1[j] = b
c1[j] =c
j = j+1
}
}
print(a)
}
temp = data.frame(MAPE = MAPE, alpha = a1, beta = b1, gamma = c1)
subset(temp, MAPE==min(MAPE))
sales.fit1= HoltWinters(sales.ts, alpha=0.1, beta=0.4, gamma=0.8)
plot(sales.fit1)
sales.fut= forecast(sales.fit1, 18)
plot(sales.fut)
actual = tail(subs.new[2],8)
forcast = sales.fut$mean[11:18]
err=MAPE(actual$SPEND_SUM,forcast)
err
data.work$DISPLAY = as.factor(data.work$DISPLAY)
data.work=read.csv("work1.csv")
data.work$timestamp=as.Date(data.work$WEEKEND_DATE,format="%d-%b-%y")
data.work=data.work[-1]
require(dplyr)
new.df = data.work %>%
group_by(timestamp) %>%
mutate(SPEND_SUM = sum(SPEND))
subs.df=new.df[,25:26]
subs.new=unique(subs.df[,1:2])
library(smooth)
library(forecast)
library(graphics)
library(datasets)
sales.ts=ts(subs.new[,-1],start =c(2009,1),end =c(2011,44),frequency = 52)
plot(sales.ts)
sales.comp<- decompose(sales.ts)
?decompose
sales.comp1<- decompose(sales.ts, type = 'multiplicative')
plot(sales.comp1)
plot(sales.comp,title(main="Decomposition of Sales"))
library(Rserve)
library(pracma)
Rserve()
?quantile
data = read.csv(file = 'C:/Users/ravin/Documents/GitHub/Projects/Improving_Profitability_of_Retail Chain/work1.csv')
names(data)
names(data)
.arg1 = sum(data$SPEND)
a <- rep(1, length(.arg1));
.arg1 = sum(data$SPEND)
a <- rep(1, length(.arg1))
a
length(.arg1)
.arg1
a <- rep(1, length(.arg1))
a[findpeaks(.arg1,
threshold=quantile(.arg1,.005)
,sortstr=FALSE)[,2]]=0
a
.arg1
quantile(.arg1,.005)
quantile(.arg1,.99)
quantile(.arg1,.38)
quantile(c(1,2,3,4,5,6,7,8,9,10),.90)
quantile(c(1,2,3,4,5,6,7,8,9,10),.80)
quantile(c(1,2,3,4,5,6,7,8,9,10),.99)
