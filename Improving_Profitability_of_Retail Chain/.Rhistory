for(c in seq(from=0.1,to= 0.9,by=0.1)){
HW_Model = HoltWinters(sales.ts.dev, alpha=a, beta=b, gamma=c)
hold_predict = forecast(HW_Model,10)
MAPE[j] = sum(abs(hold_predict$mean[1:10]-sales.ts.hold[1:10])/sales.ts.hold[1:10])/length(sales.ts.hold)
a1[j] = a
b1[j] = b
c1[j] =c
j = j+1
}
}
print(a)
}
temp = data.frame(MAPE = MAPE, alpha = a1, beta = b1, gamma = c1)
subset(temp, MAPE==min(MAPE))
sales.fit1= HoltWinters(sales.ts, alpha=0.2, beta=0.2, gamma=0.9)
plot(sales.fit1)
library(forecast)
sales.fut= forecast(sales.fit1, 8)
sales.fut= forecast(sales.fit1, 18)
plot(sales.fut)
actual = tail(subs.new[2],8)
forcast = sales.fut$mean[10:18]
err=MAPE(actual$SPEND_SUM,forcast)
sales.fut= forecast(sales.fit1, 18)
plot(sales.fut)
actual = tail(subs.new[2],8)
forcast = sales.fut$mean[11:18]
err=MAPE(actual$SPEND_SUM,forcast)
err
j=1
MAPE = numeric()
a1 = numeric()
b1 = numeric()
c1 = numeric()
sales.ts.dev = head(sales.ts,143)
sales.ts.hold = head(sales.ts,5)
for(a in seq(from=0.1,to= 0.9,by=0.1)){
for(b in seq(from=0.1,to= 0.9,by=0.1)){
for(c in seq(from=0.1,to= 0.9,by=0.1)){
HW_Model = HoltWinters(sales.ts.dev, alpha=a, beta=b, gamma=c)
hold_predict = forecast(HW_Model,5)
MAPE[j] = sum(abs(hold_predict$mean[1:5]-sales.ts.hold[1:5])/sales.ts.hold[1:5])/length(sales.ts.hold)
a1[j] = a
b1[j] = b
c1[j] =c
j = j+1
}
}
print(a)
}
temp = data.frame(MAPE = MAPE, alpha = a1, beta = b1, gamma = c1)
subset(temp, MAPE==min(MAPE))
sales.fit1= HoltWinters(sales.ts, alpha=0.1, beta=0.4, gamma=0.8)
plot(sales.fit1)
library(forecast)
sales.fut= forecast(sales.fit1, 18)
plot(sales.fut)
actual = tail(subs.new[2],8)
forcast = sales.fut$mean[11:18]
err=MAPE(actual$SPEND_SUM,forcast)
err
j=1
MAPE = numeric()
a1 = numeric()
b1 = numeric()
c1 = numeric()
sales.ts.dev = head(sales.ts,143)
sales.ts.hold = head(sales.ts,5)
for(a in seq(from=0.1,to= 0.9,by=0.1)){
for(b in seq(from=0.1,to= 0.9,by=0.1)){
for(c in seq(from=0.1,to= 0.9,by=0.1)){
HW_Model = HoltWinters(sales.ts.dev, alpha=a, beta=b, gamma=c)
hold_predict = forecast(HW_Model,5)
MAPE[j] = sum(abs(hold_predict$mean[1:5]-sales.ts.hold[1:5])/sales.ts.hold[1:5])/length(sales.ts.hold)
a1[j] = a
b1[j] = b
c1[j] =c
j = j+1
}
}
print(a)
}
temp = data.frame(MAPE = MAPE, alpha = a1, beta = b1, gamma = c1)
subset(temp, MAPE==min(MAPE))
sales.fit1= HoltWinters(sales.ts, alpha=0.1, beta=0.4, gamma=0.8)
plot(sales.fit1)
plot(sales.comp,title(main="Decomposition of Sales"))
require(tseries)
adf.test(sales.ts/scale(sales.ts-sales.comp$seasonal), alternative = "stationary")
adf.test(sales.ts/(sales.ts-sales.comp$seasonal), alternative = "stationary")
names(data.work)
install.packages('ez')
require(ez)
names(data.work)
class(data.work$DISPLAY)
require(ez)
ezANOVA(data.work, dv=.(SPEND), between=.(as.factor(DISPLAY)), detailed=TRUE)
require(ez)
ezANOVA(data.work, dv=.(SPEND),wid=wid between=.(as.factor(DISPLAY)), detailed=TRUE)
require(ez)
ezANOVA(data.work, dv=.(SPEND),wid=wid, between=.(as.factor(DISPLAY)), detailed=TRUE)
require(ez)
ezANOVA(data.work, dv=.(SPEND),wid=.(S), between=.(as.factor(DISPLAY)), detailed=TRUE)
require(ez)
ezANOVA(data.work, dv=.(SPEND),wid=.(as.factor(DISPLAY)), between=.(as.factor(DISPLAY)), detailed=TRUE)
data.work$DISPLAY = as.factor(data.work$DISPLAY)
require(ez)
ezANOVA(data.work, dv=.(SPEND),wid=.(DISPLAY), between=.(DISPLAY), detailed=TRUE)
ezANOVA(data.work, dv=.(SPEND),wid=.(DISPLAY), detailed=TRUE)
anova( aov(SPEND ~ DISPLAY, data=data.work) )
require(foreign)
data_spss = read.spss(file = 'C:/Users/ravin/Documents/GitHub/Projects/IB-ICE/IB ICE.sav')
class(data_spss)
?read.spss
data_spss = read.spss(file = 'C:/Users/ravin/Documents/GitHub/Projects/IB-ICE/IB ICE.sav', to.data.frame = T)
class(data_spss)
str(data_spss)
data_spss$Layout_A = as.factor(data_spss$Layout_A)
data_spss$Layout_A = as.factor(data_spss$Layout_A)
anova( aov(IBProp ~ Layout_A, data=data_spss) )
anova( aov(SPEND ~ DISPLAY, data=data.work) )
anova( aov(IBProp ~ Layout_A, data=data_spss) )
test = data_spss %>%
select(Layout_A,IBProp) %>%
group_by(Layout_A) %>%
mutate (M = mean(IBProp))
unique(test)
unique(test[,c(1,3)])
test = data_spss %>%
select(Layout_A,IBProp) %>%
group_by(Layout_A) %>%
mutate (M = mean(IBProp, rm.na = F))
unique(test[,c(1,3)])
test = data_spss %>%
select(Layout_A,IBProp) %>%
group_by(Layout_A) %>%
mutate (M = mean(IBProp, rm.na = T))
unique(test[,c(1,3)])
test = data_spss %>%
select(Layout_A,IBProp) %>%
group_by(Layout_A) %>%
mutate (M = mean(IBProp, na.rm = T))
unique(test[,c(1,3)])
Mean_data.work = data_spss %>%
select(DISPLAY,SPEND) %>%
group_by(Layout_A) %>%
mutate (M = mean(SPEND, na.rm = T))
unique(Mean_data.work[,c(1,3)])
Mean_data.work = data.work %>%
select(DISPLAY,SPEND) %>%
group_by(Layout_A) %>%
mutate (M = mean(SPEND, na.rm = T))
Mean_data.work = data.work %>%
select(DISPLAY,SPEND) %>%
group_by(DISPLAY) %>%
mutate (M = mean(SPEND, na.rm = T))
unique(Mean_data.work[,c(1,3)])
data.work$DISPLAY = as.factor(data.work$DISPLAY)
require(ez)
anova( aov(SPEND ~ DISPLAY, data=data.work) )
Mean_data.work = data.work %>%
select(DISPLAY,SPEND) %>%
group_by(DISPLAY) %>%
mutate (M = mean(SPEND, na.rm = T))
unique(Mean_data.work[,c(1,3)])
d1=diff(sales.ts)
require(tseries)
adf.test(sales.ts/scale(sales.ts-sales.comp$seasonal), alternative = "stationary")
j=1
MAPE = numeric()
a1 = numeric()
b1 = numeric()
c1 = numeric()
sales.ts.dev = head(sales.ts,143)
sales.ts.hold = head(sales.ts,5)
for(a in seq(from=0.1,to= 0.9,by=0.1)){
for(b in seq(from=0.1,to= 0.9,by=0.1)){
for(c in seq(from=0.1,to= 0.9,by=0.1)){
HW_Model = HoltWinters(sales.ts.dev, alpha=a, beta=b, gamma=c)
hold_predict = forecast(HW_Model,5)
MAPE[j] = sum(abs(hold_predict$mean[1:5]-sales.ts.hold[1:5])/sales.ts.hold[1:5])/length(sales.ts.hold)
a1[j] = a
b1[j] = b
c1[j] =c
j = j+1
}
}
print(a)
}
temp = data.frame(MAPE = MAPE, alpha = a1, beta = b1, gamma = c1)
subset(temp, MAPE==min(MAPE))
sales.fit1= HoltWinters(sales.ts, alpha=0.1, beta=0.4, gamma=0.8)
plot(sales.fit1)
sales.fut= forecast(sales.fit1, 18)
plot(sales.fut)
actual = tail(subs.new[2],8)
forcast = sales.fut$mean[11:18]
err=MAPE(actual$SPEND_SUM,forcast)
err
data.work$DISPLAY = as.factor(data.work$DISPLAY)
data.work=read.csv("work1.csv")
data.work$timestamp=as.Date(data.work$WEEKEND_DATE,format="%d-%b-%y")
data.work=data.work[-1]
require(dplyr)
new.df = data.work %>%
group_by(timestamp) %>%
mutate(SPEND_SUM = sum(SPEND))
subs.df=new.df[,25:26]
subs.new=unique(subs.df[,1:2])
library(smooth)
library(forecast)
library(graphics)
library(datasets)
sales.ts=ts(subs.new[,-1],start =c(2009,1),end =c(2011,44),frequency = 52)
plot(sales.ts)
sales.comp<- decompose(sales.ts)
?decompose
sales.comp1<- decompose(sales.ts, type = 'multiplicative')
plot(sales.comp1)
plot(sales.comp,title(main="Decomposition of Sales"))
library(Rserve)
library(pracma)
Rserve()
?quantile
data = read.csv(file = 'C:/Users/ravin/Documents/GitHub/Projects/Improving_Profitability_of_Retail Chain/work1.csv')
names(data)
names(data)
.arg1 = sum(data$SPEND)
a <- rep(1, length(.arg1));
.arg1 = sum(data$SPEND)
a <- rep(1, length(.arg1))
a
length(.arg1)
.arg1
a <- rep(1, length(.arg1))
a[findpeaks(.arg1,
threshold=quantile(.arg1,.005)
,sortstr=FALSE)[,2]]=0
a
.arg1
quantile(.arg1,.005)
quantile(.arg1,.99)
quantile(.arg1,.38)
quantile(c(1,2,3,4,5,6,7,8,9,10),.90)
quantile(c(1,2,3,4,5,6,7,8,9,10),.80)
quantile(c(1,2,3,4,5,6,7,8,9,10),.99)
require(readxl) # read excel files
require(dplyr)
excel_sheets('dunnhumby - Breakfast at the Frat.xlsx')
rawdata = read_excel(path = 'dunnhumby - Breakfast at the Frat.xlsx', sheet = 'dh Transaction Data')
sapply(rawdata,class)
rawdata = rawdata %>%
left_join(read_excel(path = 'dunnhumby - Breakfast at the Frat.xlsx', sheet = 'dh Store Lookup'),
by = c('STORE_NUM'='STORE_ID')) %>%
left_join(read_excel(path = 'dunnhumby - Breakfast at the Frat.xlsx', sheet = 'dh Products Lookup'),
by = 'UPC')
sapply(rawdata,class)
Missing_data_Check <- function(data_set){
NA_Count = sapply(data_set,function(y) sum(length(which(is.na(y)))))
Null_Count = sapply(data_set,function(y) sum(length(which(is.null(y)))))
Length0_Count = sapply(data_set,function(y) sum(length(which(length(y)==0))))
Empty_Count = sapply(data_set,function(y) sum(length(which(y==''))))
Total_NonData = NA_Count+Null_Count+Length0_Count+Empty_Count
return( Total_NonData )
}
Missing_data_Check(rawdata)
str()
glimpse(rawdata)
class(rawdata$AVG_WEEKLY_BASKETS)
?as.Date
head(rawdata$WEEK_END_DATE)
a =as.Date(rawdata$WEEK_END_DATE)
class(a)
head(a)
rawdata$WEEK_END_DATE = as.Date(rawdata$WEEK_END_DATE)
Missing_data_Check(rawdata)
glimpse(rawdata)
Missing_data_Check(rawdata[1])
rawdata[1]
sapply(rawdata,function(y) sum(length(which(is.na(y)))))
Missing_data_Check <- function(data_set){
NA_Count = sapply(data_set,function(y) sum(length(which(is.na(y)))))
#Null_Count = sapply(data_set,function(y) sum(length(which(is.null(y)))))
#Length0_Count = sapply(data_set,function(y) sum(length(which(length(y)==0))))
#Empty_Count = sapply(data_set,function(y) sum(length(which(y==''))))
#Total_NonData = NA_Count+Null_Count+Length0_Count+Empty_Count
return( NA_Count )
}
Missing_data_Check(rawdata[1])
Missing_data_Check(rawdata)
Missing_data_Check <- function(data_set){
NA_Count = sapply(data_set,function(y) sum(length(which(is.na(y)))))
Null_Count = sapply(data_set,function(y) sum(length(which(is.null(y)))))
#Length0_Count = sapply(data_set,function(y) sum(length(which(length(y)==0))))
#Empty_Count = sapply(data_set,function(y) sum(length(which(y==''))))
Total_NonData = NA_Count+Null_Count #+Length0_Count+Empty_Count
return( Total_NonData )
}
Missing_data_Check(rawdata)
Missing_data_Check <- function(data_set){
NA_Count = sapply(data_set,function(y) sum(length(which(is.na(y)))))
Null_Count = sapply(data_set,function(y) sum(length(which(is.null(y)))))
Length0_Count = sapply(data_set,function(y) sum(length(which(length(y)==0))))
#Empty_Count = sapply(data_set,function(y) sum(length(which(y==''))))
Total_NonData = NA_Count+Null_Count+Length0_Count+#Empty_Count
return( Total_NonData )
}
Missing_data_Check(rawdata)
Missing_data_Check <- function(data_set){
NA_Count = sapply(data_set,function(y) sum(length(which(is.na(y)))))
Null_Count = sapply(data_set,function(y) sum(length(which(is.null(y)))))
Length0_Count = sapply(data_set,function(y) sum(length(which(length(y)==0))))
#Empty_Count = sapply(data_set,function(y) sum(length(which(y==''))))
Total_NonData = NA_Count+Null_Count+Length0_Count+#Empty_Count
return( Total_NonData )
}
Missing_data_Check(rawdata)
Missing_data_Check <- function(data_set){
NA_Count = sapply(data_set,function(y) sum(length(which(is.na(y)))))
Null_Count = sapply(data_set,function(y) sum(length(which(is.null(y)))))
#Length0_Count = sapply(data_set,function(y) sum(length(which(length(y)==0))))
#Empty_Count = sapply(data_set,function(y) sum(length(which(y==''))))
Total_NonData = NA_Count+Null_Count #+Length0_Count+Empty_Count
return( Total_NonData )
}
Missing_data_Check(rawdata)
Missing_data_Check <- function(data_set){
NA_Count = sapply(data_set,function(y) sum(length(which(is.na(y)))))
Null_Count = sapply(data_set,function(y) sum(length(which(is.null(y)))))
Length0_Count = sapply(data_set,function(y) sum(length(which(length(y)==0))))
#Empty_Count = sapply(data_set,function(y) sum(length(which(y==''))))
Total_NonData = NA_Count+Null_Count+Length0_Count #+Empty_Count
return( Total_NonData )
}
Missing_data_Check(rawdata)
Missing_data_Check <- function(data_set){
NA_Count = sapply(data_set,function(y) sum(length(which(is.na(y)))))
Null_Count = sapply(data_set,function(y) sum(length(which(is.null(y)))))
Length0_Count = sapply(data_set,function(y) sum(length(which(length(y)==0))))
Empty_Count = sapply(data_set,function(y) sum(length(which(y==''))))
Total_NonData = NA_Count+Null_Count+Length0_Count+Empty_Count
return( Total_NonData )
}
Missing_data_Check(rawdata)
sapply(rawdata,function(y) sum(length(which(y==''))))
sapply(rawdata,function(y) sum(length(which(y==''))))
sapply(rawdata,function(y) sum(length(which(y==''))))
sapply(rawdata[1],function(y) sum(length(which(y==''))))
rawdata[1,1]
rawdata[1,1] == ''
sapply(rawdata[2],function(y) sum(length(which(y==''))))
sapply(rawdata[2:4],function(y) sum(length(which(y==''))))
sapply(rawdata[2:26],function(y) sum(length(which(y==''))))
sapply(rawdata[2:25],function(y) sum(length(which(y==''))))
class(rawdata[1])
class(rawdata[2])
class(rawdata$WEEK_END_DATE)
sapply(rawdata,function(y) {if(class(y) != 'Date')sum(length(which(y=='')))})
sapply(rawdata,function(y) {if(class(y) != 'Date')
return(sum(length(which(y==''))))
else return(0)})
Missing_data_Check <- function(data_set){
NA_Count = sapply(data_set,function(y) sum(length(which(is.na(y)))))
Null_Count = sapply(data_set,function(y) sum(length(which(is.null(y)))))
Length0_Count = sapply(data_set,function(y) sum(length(which(length(y)==0))))
Empty_Count = sapply(data_set,function(y) {if(class(y) != 'Date')
return(sum(length(which(y==''))))
else return(0)})
Total_NonData = NA_Count+Null_Count+Length0_Count+Empty_Count
return( Total_NonData )
}
Missing_data_Check(rawdata)
a = read.csv('work1.csv')
rm(a)
Missing_data_Check <- function(data_set){
NA_Count = sapply(data_set,function(y) sum(length(which(is.na(y)))))
Null_Count = sapply(data_set,function(y) sum(length(which(is.null(y)))))
Length0_Count = sapply(data_set,function(y) sum(length(which(length(y)==0))))
Empty_Count = sapply(data_set,function(y) {if(class(y) != 'Date')
return(sum(length(which(y==''))))
else return(0)})
Total_NonData = NA_Count#+Null_Count+Length0_Count+Empty_Count
return( Total_NonData )
}
Missing_data_Check(rawdata)
non_baseprice_missing_rawdata = rawdata[,1:25][!apply(rawdata[,1:25], 1, function(x) any(is.na(x))),]
apply(rawdata[,1:25], 1, function(x) any(is.na(x)))
apply(rawdata[,1:25], 1, function(x) any(is.na(x)))==TRUE
sum(apply(rawdata[,1:25], 1, function(x) any(is.na(x)))==TRUE)
names(rawdata)
apply(rawdata[,9], 1, function(x) any(is.na(x)))
sum(apply(rawdata[,9], 1, function(x) any(is.na(x))))
non_baseprice_missing_rawdata = rawdata[,1:25][!apply(rawdata[,9], 1, function(x) any(is.na(x))),]
?select
names(rawdata)
product_WeeklyAvg_basePrice = non_baseprice_missing_rawdata %>%
select(WEEK_END_DATE,UPC,BASE_PRICE)
product_WeeklyAvg_basePrice = non_baseprice_missing_rawdata %>%
select(WEEK_END_DATE,UPC,BASE_PRICE)%>%
group_by(UPC,WEEK_END_DATE) %>%
mutate(AVG_BASE_PRICE= mean(BASE_PRICE))
write.csv(product_WeeklyAvg_basePrice,'product_WeeklyAvg_basePrice.csv')
rawdata = read_excel(path = 'dunnhumby - Breakfast at the Frat.xlsx', sheet = 'dh Transaction Data')
rawdata = rawdata %>%
left_join(read_excel(path = 'dunnhumby - Breakfast at the Frat.xlsx', sheet = 'dh Store Lookup'),
by = c('STORE_NUM'='STORE_ID')) #%>%
a = data.frame(a1= c(1,2,3),b1=c(,'a','b','c'))
a = data.frame(a1= c(1,2,3),b1=c('a','b','c'))
rawStoreData = read_excel(path = 'dunnhumby - Breakfast at the Frat.xlsx', sheet = 'dh Store Lookup')
a = rawStoreData[which(unique(rawStoreData$STORE_ID))]
unique(rawStoreData$STORE_ID)
a = rawStoreData[which(unique(rawStoreData$STORE_ID)),]
a = rawStoreData[unique(rawStoreData$STORE_ID),]
duplicated(rawStoreData$STORE_ID)
a = rawStoreData[which(-duplicated(rawStoreData$STORE_ID)),]
~duplicated(rawStoreData$STORE_ID)
!duplicated(rawStoreData$STORE_ID)
a = rawStoreData[which(!duplicated(rawStoreData$STORE_ID)),]
View(a)
rawdata = read_excel(path = 'dunnhumby - Breakfast at the Frat.xlsx', sheet = 'dh Transaction Data')
rawStoreData = read_excel(path = 'dunnhumby - Breakfast at the Frat.xlsx', sheet = 'dh Store Lookup')
rawdata = rawdata %>%
left_join(rawStoreData[which(!duplicated(rawStoreData$STORE_ID)),],
by = c('STORE_NUM'='STORE_ID')) #%>%
rawdata = read_excel(path = 'dunnhumby - Breakfast at the Frat.xlsx', sheet = 'dh Transaction Data')
rawStoreData = read_excel(path = 'dunnhumby - Breakfast at the Frat.xlsx', sheet = 'dh Store Lookup')
rawdata = rawdata %>%
left_join(rawStoreData[which(!duplicated(rawStoreData$STORE_ID)),],
by = c('STORE_NUM'='STORE_ID')) %>%
left_join(read_excel(path = 'dunnhumby - Breakfast at the Frat.xlsx', sheet = 'dh Products Lookup'),
by = 'UPC')
require(readxl) # read excel files
require(dplyr)
excel_sheets('dunnhumby - Breakfast at the Frat.xlsx')
rawdata = read_excel(path = 'dunnhumby - Breakfast at the Frat.xlsx', sheet = 'dh Transaction Data')
names(rawdata)
rawStoreData = read_excel(path = 'dunnhumby - Breakfast at the Frat.xlsx', sheet = 'dh Store Lookup')
rawdata = rawdata %>%
left_join(rawStoreData[which(!duplicated(rawStoreData$STORE_ID)),],
by = c('STORE_NUM'='STORE_ID')) %>%
left_join(read_excel(path = 'dunnhumby - Breakfast at the Frat.xlsx', sheet = 'dh Products Lookup'),
by = 'UPC')
Missing_data_Check <- function(data_set){
NA_Count = sapply(data_set,function(y) sum(length(which(is.na(y)))))
Null_Count = sapply(data_set,function(y) sum(length(which(is.null(y)))))
Length0_Count = sapply(data_set,function(y) sum(length(which(length(y)==0))))
Empty_Count = sapply(data_set,function(y) {if(class(y) != 'Date')
return(sum(length(which(y==''))))
else return(0)})
Total_NonData = NA_Count+Null_Count+Length0_Count+Empty_Count
return( Total_NonData )
}
rawdata$WEEK_END_DATE = as.Date(rawdata$WEEK_END_DATE)
Missing_data_Check(rawdata)
glimpse(rawdata)
non_baseprice_missing_rawdata = rawdata[,1:25][!apply(rawdata[,9], 1, function(x) any(is.na(x))),]
product_WeeklyAvg_basePrice = non_baseprice_missing_rawdata %>%
select(WEEK_END_DATE,UPC,BASE_PRICE)%>%
group_by(UPC,WEEK_END_DATE) %>%
mutate(AVG_BASE_PRICE= mean(BASE_PRICE))
write.csv(product_WeeklyAvg_basePrice,'product_WeeklyAvg_basePrice.csv')
names(product_WeeklyAvg_basePrice)
product_WeeklyAvg_basePrice = unique(product_WeeklyAvg_basePrice[,-3])
product_WeeklyAvg_basePrice[product_WeeklyAvg_basePrice$UPC==1111009507]
product_WeeklyAvg_basePrice[product_WeeklyAvg_basePrice$UPC==1111009507,]
product_WeeklyAvg_basePrice[product_WeeklyAvg_basePrice$UPC==1111009507 & product_WeeklyAvg_basePrice$WEEK_END_DATE == 2010-04-07,]
product_WeeklyAvg_basePrice[product_WeeklyAvg_basePrice$UPC==1111009507 && product_WeeklyAvg_basePrice$WEEK_END_DATE == 2010-04-07,]
product_WeeklyAvg_basePrice[product_WeeklyAvg_basePrice$WEEK_END_DATE == 2010-04-07,]
product_WeeklyAvg_basePrice[product_WeeklyAvg_basePrice$WEEK_END_DATE == as.Date(2010-04-07),]
product_WeeklyAvg_basePrice[product_WeeklyAvg_basePrice$WEEK_END_DATE == '2010-04-07',]
product_WeeklyAvg_basePrice[product_WeeklyAvg_basePrice$UPC==1111009507 & product_WeeklyAvg_basePrice$WEEK_END_DATE == '2010-04-07',]
baseprice_missing_rawdata = rawdata[,1:25][apply(rawdata[,9], 1, function(x) any(is.na(x))),]
View(baseprice_missing_rawdata)
names(product_WeeklyAvg_basePrice)
baseprice_missing_rawdata = baseprice_missing_rawdata %>%
left_join(product_WeeklyAvg_basePrice,by=c("WEEK_END_DATE","UPC"))
non_baseprice_missing_rawdata = rawdata[,1:25][!apply(rawdata[,9], 1, function(x) any(is.na(x))),]
product_WeeklyAvg_basePrice = non_baseprice_missing_rawdata %>%
select(WEEK_END_DATE,UPC,BASE_PRICE)%>%
group_by(UPC,WEEK_END_DATE) %>%
mutate(AVG_BASE_PRICE= round(mean(BASE_PRICE),2))
product_WeeklyAvg_basePrice = unique(product_WeeklyAvg_basePrice[,-3])
baseprice_missing_rawdata = rawdata[,1:25][apply(rawdata[,9], 1, function(x) any(is.na(x))),]
baseprice_missing_rawdata = baseprice_missing_rawdata %>%
left_join(product_WeeklyAvg_basePrice,by=c("WEEK_END_DATE","UPC"))
baseprice_missing_rawdata$BASE_PRICE = baseprice_missing_rawdata$AVG_BASE_PRICE
baseprice_missing_rawdata[-26]
rawdata_BasePrice = rbind(non_baseprice_missing_rawdata,baseprice_missing_rawdata[-26])
Missing_data_Check(rawdata_BasePrice)
names(rawdata)
non_price_missing_rawdata = rawdata[,1:25][!apply(rawdata[,8], 1, function(x) any(is.na(x))),]
product_WeeklyAvg_Price = non_price_missing_rawdata %>%
select(WEEK_END_DATE,UPC,PRICE)%>%
group_by(UPC,WEEK_END_DATE) %>%
mutate(AVG_PRICE= round(mean(PRICE),2))
rm(list = c('non_baseprice_missing_rawdata','product_WeeklyAvg_basePrice','baseprice_missing_rawdata'))
non_price_missing_rawdata = rawdata_BasePrice[,1:25][!apply(rawdata_BasePrice[,8], 1, function(x) any(is.na(x))),]
product_WeeklyAvg_Price = non_price_missing_rawdata %>%
select(WEEK_END_DATE,UPC,PRICE)%>%
group_by(UPC,WEEK_END_DATE) %>%
mutate(AVG_PRICE= round(mean(PRICE),2))
View(product_WeeklyAvg_Price)
product_WeeklyAvg_Price = unique(product_WeeklyAvg_Price[,-3])
price_missing_rawdata = rawdata_BasePrice[,1:25][apply(rawdata_BasePrice[,8], 1, function(x) any(is.na(x))),]
price_missing_rawdata = price_missing_rawdata %>%
left_join(product_WeeklyAvg_Price,by=c("WEEK_END_DATE","UPC"))
price_missing_rawdata$PRICE = price_missing_rawdata$AVG_PRICE
rawdata_BasePrice_Price = rbind(non_price_missing_rawdata,price_missing_rawdata[-26])
Missing_data_Check(rawdata_BasePrice_Price)
rm(c('non_price_missing_rawdata','product_WeeklyAvg_Price','price_missing_rawdata','rawdata_BasePrice'))
rm(list = c('non_price_missing_rawdata','product_WeeklyAvg_Price','price_missing_rawdata','rawdata_BasePrice'))
Missing_data_Check(rawdata_BasePrice_Price)
