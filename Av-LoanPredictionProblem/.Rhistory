setwd("~/GitHub/Projects/Av-LoanPredictionProblem")
data_set = read.csv('train.csv', header = T)
head(data_set)
sapply(data_set, class)
names(data_set)
which((table(data_set$Loan_ID)>2)==T)
data_set=data_set[,-1]
table(data_set$Gender)
sapply(data_set[,c(1,2,3,4,5,10,11,12)],table)
NA_Count = sapply(data_set,
function(y) sum(length(which(is.na(y)))))
NA_Count
Null_Count = sapply(data_set,
function(y) sum(length(which(is.null(y)))))
Null_Count
Length0_Count = sapply(data_set,
function(y) sum(length(which(length(y)==0))))
Length0_Count
Empty_Count = sapply(data_set,
function(y) sum(length(which(y==''))))
Empty_Count
data_set_No_Missing_Values=data_set[!apply(data_set, 1, function(x) any(x=="" | is.na(x))),]
current_dataset = data_set_No_Missing_Values
sapply(current_dataset, class)
summary(current_dataset$Property_Area)
current_dataset$Gender = factor(current_dataset$Gender, levels = c('Female','Male'), labels = c(0,1))
current_dataset$Married = factor(current_dataset$Married, levels = c('No','Yes'), labels = c(0,1))
current_dataset$Dependents = factor(current_dataset$Dependents, levels = c('0','1','2','3+'), labels = c(0,1,2,3))
current_dataset$Education = factor(current_dataset$Education, levels = c('Graduate','Not Graduate'), labels = c(0,1))
current_dataset$Self_Employed = factor(current_dataset$Self_Employed, levels = c('No','Yes'), labels = c(0,1))
current_dataset$Loan_Status = factor(current_dataset$Loan_Status, levels = c('N','Y'), labels = c(0,1))
current_dataset$Property_Area = factor(current_dataset$Property_Area, levels = c('Rural','Semiurban','Urban'), labels = c(0,1,2))
library(caTools)
set.seed(123)
splitvector = sample.split(current_dataset$Loan_Status, SplitRatio = 0.75)
training_dataset = subset(current_dataset, splitvector==T)
testing_dataset = subset(current_dataset, splitvector==F)
summary(training_dataset$Education)
LogR_Model = glm(Loan_Status~.,
data = training_dataset,
family = binomial)
library(lmtest)
lrtest(LogR_Model)
library(pscl)
pR2(LogR_Model)
newdata = read.csv('test.csv',header = T)
head(newdata)
temp = predict(LogR_Model,newdata,type = "response")
