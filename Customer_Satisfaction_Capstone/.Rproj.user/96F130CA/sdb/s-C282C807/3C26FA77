{
    "collab_server" : "",
    "contents" : "### Focus       \t\t: Feature Engineering on Customer Satisfaction dataset           \n### CreatedOn   \t\t: 05-sep-2017 \n### Author      \t\t: Ravindranadh \n### Location    \t\t: GreatLakes Institute of Managment, Chennai\n### ProjectName \t\t: \n### Latest Revision : V 1.0\n\n### data set Reading\nrequire(readxl)\nDataset = read_excel('Workingdata.xlsx')\nnames(Dataset)\ncolnames(Dataset) = c(colnames(Dataset[,1:17]),'Q1','Q2','Q3','Q4','Q5','Q6','Q7','Q8','Q9','Q10',colnames(Dataset[,28]),'Remarks')\n\n### Missing value Analysis\nMissing_data_Check <- function(data_set){\n  NA_Count = sapply(data_set,function(y) sum(length(which(is.na(y))))) \n  Null_Count = sapply(data_set,function(y) sum(length(which(is.null(y)))))\n  Length0_Count = sapply(data_set,function(y) sum(length(which(length(y)==0))))\n  Empty_Count = sapply(data_set,function(y) sum(length(which(y==''))))\n  Total_NonData = NA_Count+Null_Count+Length0_Count+Empty_Count\n  return( Total_NonData )\n}\n\nMissing_Values = Missing_data_Check(Dataset)\nMissingValuesPlot = barplot(Missing_Values,col = 'gray',\n                            main ='Missing Values across all attributes',\n                            xlab = '',ylab = \"Missing count\",xaxt = 'n')\ntext(x = MissingValuesPlot, y = Missing_Values,\n     label = Missing_Values,col = \"red\", cex = 0.8)\naxis(1, at=MissingValuesPlot, labels=names(Missing_Values), \n     tick=FALSE, las=2, line=-0.5, cex.axis=0.5)\n\nMissingValuesPlotQ = barplot(Missing_Values[18:27],col = 'gray',\n                             main ='Missing responses for Questions',\n                             xlab = '',ylab = \"Missing count\",xaxt = 'n')\ntext(x = MissingValuesPlotQ, y = Missing_Values[18:27],\n     label = Missing_Values[18:27],col = \"red\", cex = 0.8)\naxis(1, at=MissingValuesPlotQ, labels=names(Missing_Values[18:27]), \n     tick=FALSE, las=2, line=-0.5, cex.axis=0.5)\n\nmissing_all = subset(Dataset, is.na(Dataset$Q1) &\n                       is.na(Dataset$Q2)&\n                       is.na(Dataset$Q3)&\n                       is.na(Dataset$Q4)&\n                       is.na(Dataset$Q5)&\n                       is.na(Dataset$Q6)&\n                       is.na(Dataset$Q7)&\n                       is.na(Dataset$Q8)&\n                       is.na(Dataset$Q9)&\n                       is.na(Dataset$Q10))\n\nmissing_anyone = subset(Dataset, is.na(Dataset$Q1) |\n                          is.na(Dataset$Q2)|\n                          is.na(Dataset$Q3)|\n                          is.na(Dataset$Q4)|\n                          is.na(Dataset$Q5)|\n                          is.na(Dataset$Q6)|\n                          is.na(Dataset$Q7)|\n                          is.na(Dataset$Q8)|\n                          is.na(Dataset$Q9)|\n                          is.na(Dataset$Q10))\n\nQdataset = Dataset[,18:27]\nPdataset = Dataset[,c(1,18:28)]\nfor(i in 1:10){\n  dataset_name = paste('missing_Q',i%%11,sep='')\n  temp = subset(Qdataset, is.na(Qdataset[i%%11])&\n                  (!is.na(Qdataset[ifelse((i+1)%%10 == 0, 10 ,(i+1)%%10 )])&\n                     !is.na(Qdataset[ifelse((i+2)%%10 == 0, 10 ,(i+2)%%10 )])&\n                     !is.na(Qdataset[ifelse((i+3)%%10 == 0, 10 ,(i+3)%%10 )])&\n                     !is.na(Qdataset[ifelse((i+4)%%10 == 0, 10 ,(i+4)%%10 )])&\n                     !is.na(Qdataset[ifelse((i+5)%%10 == 0, 10 ,(i+5)%%10 )])&\n                     !is.na(Qdataset[ifelse((i+6)%%10 == 0, 10 ,(i+6)%%10 )])&\n                     !is.na(Qdataset[ifelse((i+7)%%10 == 0, 10 ,(i+7)%%10 )])&\n                     !is.na(Qdataset[ifelse((i+8)%%10 == 0, 10 ,(i+8)%%10 )])&\n                     !is.na(Qdataset[ifelse((i+9)%%10 == 0, 10 ,(i+9)%%10 )])))\n  assign(dataset_name, temp)\n}\nrm(temp)\n\nNames = c('missing_all','missing_anyone','missing_Q1','missing_Q2','missing_Q3',\n          'missing_Q4','missing_Q5','missing_Q6','missing_Q7','missing_Q8',\n          'missing_Q9','missing_Q10')\nMissing_Counts = c(nrow(missing_all),nrow(missing_anyone),nrow(missing_Q1),nrow(missing_Q2),nrow(missing_Q3),\n                   nrow(missing_Q4),nrow(missing_Q5),nrow(missing_Q6),nrow(missing_Q7),nrow(missing_Q8),\n                   nrow(missing_Q9),nrow(missing_Q10))\nnames(Missing_Counts) = Names\nMissingCountPlot = barplot(Missing_Counts,col = 'gray',\n                           main ='Missing Value trend',\n                           xlab = '',ylab = \"Missing count\",xaxt = 'n')\ntext(x = MissingCountPlot, y = Missing_Counts,\n     label = Missing_Counts,col = \"red\", cex = 0.8,font = 2)\naxis(1, at=MissingCountPlot, labels=names(Missing_Counts), \n     tick=FALSE, las=2, line=-0.5, cex.axis=0.8)\n\n### Correlation Analysis on Questions data\nQdataset_no_missing=Qdataset[!apply(Qdataset, 1, function(x) any(x==\"\" | is.na(x))),] \nPdataset_no_missing=Pdataset[!apply(Pdataset, 1, function(x) any(x==\"\" | is.na(x))),] \n\nCorrelation=cor(Qdataset_no_missing)\nrequire(corrplot)\nrequire(RColorBrewer)\n\ncorrplot(Correlation, type=\"upper\",\n         method = 'circle' ,order=\"hclust\", add = F,\n         col=brewer.pal(n=4, name=\"RdBu\"),  \n         outline = T)\nrm(list = Names)\n\n### Factor Analysis on Non missing data set of 10 Questions\nrequire(psych)\n# pca = principal(Qdataset_no_missing,nfactors = ncol(Qdataset_no_missing),rotate = 'none')\n# pca\n# \n# pca_reduced = principal(Qdataset_no_missing, nfactors = 6, rotate = 'none')\n# pca_reduced\n# \n# pca_rotated = principal(Qdataset_no_missing, nfactors = 6, rotate = 'varimax')\n# pca_rotated\n\npca = principal(Pdataset_no_missing[,2:11],nfactors = 10,rotate = 'none')\npca\n\npca_reduced = principal(Pdataset_no_missing[,2:11], nfactors = 6, rotate = 'none')\npca_reduced\n\npca_rotated = principal(Pdataset_no_missing[,2:11], nfactors = 6, rotate = 'varimax')\npca_rotated\n\nrm(Correlation)\nPdataset_no_missing_scaled = scale(Pdataset_no_missing[,2:12])\nPdataset_no_missing_master = cbind(Pdataset_no_missing,pca_rotated$scores,\n                                   Scaled_Satindex=Pdataset_no_missing_scaled[,11])\n\nn = names(Pdataset_no_missing_master[13:18])\nformula = as.formula(paste(\"Scaled_Satindex ~\", paste(n, collapse = \" + \")))\nLinear_regression = lm(formula,\n                data = Pdataset_no_missing_master)\nsummary(Linear_regression)\n\n### Missing Value handling - State\nDataset_M = Dataset\nDataset_M[which(Dataset_M$State == 'Chattisgarh'),'State'] = 'Chhattisgarh'\nDataset_M[which(Dataset_M$State == 'Orissa'),'State'] = 'Odisha'\nDataset_M[which(Dataset_M$State == 'W Bengal'),'State'] = 'West Bengal'\nDataset_M[which(Dataset_M$State == 'TN'),'State'] = 'Tamil Nadu'\n\nDataset_M$State = tolower(trimws(Dataset_M$State))\nDataset_M$`City-final` = tolower(trimws(Dataset_M$`City-final`))\nDataset_M$City = tolower(trimws(Dataset_M$City))\nDataset_M$Location = tolower(trimws(Dataset_M$Location))\n\nStates_Cities = read_excel(path = 'Cities_States.xlsx')\nStates_Cities$`Name of City` = trimws(tolower(States_Cities$`Name of City`),which = 'both')\nStates_Cities$State = trimws(tolower(States_Cities$State),which = 'both')\n\nDataset_M$State = trimws(tolower(Dataset_M$State),which = 'both')\nDataset_M$Location = trimws(tolower(Dataset_M$Location),which = 'both')\n\n### Missing States handling with the help of location\nrequire(readxl)\nLocations_Assigned = read_excel(path = 'data/Cities_States.xlsx')\nexcel_sheets(path = 'data/Workingdata.xlsx')\nLocations_Missed = read_excel(path = 'data/Workingdata.xlsx',sheet = 'State_City_Missing')\n\nLocations_Assigned$Location = tolower(trimws(Locations_Assigned$Location))\nLocations_Missed$Location = tolower(trimws(Locations_Missed$Location))\n\nrequire(stringdist)\nDistanceNameMatrix<-matrix(NA, ncol = length(Locations_Missed$Location),\n                           nrow = length(Locations_Assigned$Location))\nfor(i in 1:length(Locations_Missed$Location)) {\n  for(j in 1:length(Locations_Assigned$Location)) { \n    DistanceNameMatrix[j,i]<-stringdist(tolower(Locations_Missed[i,]$Location),\n                                        tolower(Locations_Assigned[j,]$Location),\n                                        method ='jw')      \n  }\n}\n\nMatch_Location_DF<-NULL\nMinName<-apply(DistanceNameMatrix, 1, base::min)\nfor(i in 1:nrow(DistanceNameMatrix)){\n  S2<-match(MinName[i],DistanceNameMatrix[i,])\n  S1<-i\n  Match_Location_DF<-rbind(data.frame(Missed_Id=S2,Assigned_Id=S1,\n                                      Missed=Locations_Missed[S2,]$Location, \n                                      Assigned=Locations_Assigned[S1,]$Location, \n                                      adist=MinName[i],\n                                      method='jm'),\n                           Match_Location_DF)\n}\nView(Match_Location_DF)\n\nMatch_Location_DF = Match_Location_DF[Match_Location_DF$adist<=0.05,]   \nMatch_Location_DF = Match_Location_DF[order(Match_Location_DF$Assigned_Id),]\nMatch_Location_DF = Match_Location_DF[!duplicated(Match_Location_DF[,3:4]),] \n\nfor(i in 1:nrow(Match_Location_DF)){\n  temp_Assigned_Id = Match_Location_DF$Assigned_Id[i]\n  temp_state = Locations_Assigned$State[temp_Assigned_Id]\n  temp_location = as.character(Match_Location_DF$Missed[i])\n  Dataset_M = within(Dataset_M,State[Location == temp_location ] <- temp_state) \n}  ### 4546 state are mapped !!!\n\nwrite.csv(Dataset_M,'test.csv')\n\n### Missing States handling with the help of Cities\nexcel_sheets(path = 'data/Workingdata.xlsx')\nCities_Missed = read_excel(path = 'data/Workingdata.xlsx',sheet = 'State_Missing_CityDetails')\n\nLocations_Assigned$Location = tolower(trimws(Locations_Assigned$Location))\nCities_Missed$City = tolower(trimws(Cities_Missed$City))\n\nDistanceNameMatrix<-matrix(NA, ncol = length(Cities_Missed$City),\n                           nrow = length(Locations_Assigned$Location))\nfor(i in 1:length(Cities_Missed$City)) {\n  for(j in 1:length(Locations_Assigned$Location)) { \n    DistanceNameMatrix[j,i]<-stringdist(tolower(Cities_Missed[i,]$City),\n                                        tolower(Locations_Assigned[j,]$Location),\n                                        method ='jw')      \n  }\n}\n\nMatch_Location_DF<-NULL\nMinName<-apply(DistanceNameMatrix, 1, base::min)\nfor(i in 1:nrow(DistanceNameMatrix)){\n  S2<-match(MinName[i],DistanceNameMatrix[i,])\n  S1<-i\n  Match_Location_DF<-rbind(data.frame(Missed_Id=S2,Assigned_Id=S1,\n                                      Missed=Cities_Missed[S2,]$City, \n                                      Assigned=Locations_Assigned[S1,]$Location, \n                                      adist=MinName[i],\n                                      method='jm'),\n                           Match_Location_DF)\n}\nView(Match_Location_DF)\nbackup_Match_Location_DF = Match_Location_DF\n\nMatch_Location_DF = Match_Location_DF[Match_Location_DF$adist==0,]   \nMatch_Location_DF = Match_Location_DF[order(Match_Location_DF$Assigned_Id),]\nMatch_Location_DF = Match_Location_DF[!duplicated(Match_Location_DF[,3:4]),] \n\nfor(i in 1:nrow(Match_Location_DF)){\n  temp_Assigned_Id = Match_Location_DF$Assigned_Id[i]\n  temp_state = Locations_Assigned$State[temp_Assigned_Id]\n  temp_location = as.character(Match_Location_DF$Missed[i])\n  Dataset_M = within(Dataset_M,State[Location == temp_location ] <- temp_state) \n}  ### 3257 state are mapped !!!\n\n### should work on -- Planner group and State relation\n\nlength(unique(Dataset_M$`Planner Group code`))\nrequire(dplyr)\nPlanner_State_count=Dataset_M %>%\n  group_by(Dataset_M$`Planner Group code`) %>%\n  summarise(ifelse(sum(is.na(State))>0,n_distinct(State)-1,n_distinct(State)))\nPlanner_State_count = as.data.frame(Planner_State_count)\ncolnames(Planner_State_count) = c('PlannerGroupCode','State_Count')\nPlanner_State_count\n\nPlanner_State_count2=Dataset_M %>%select(`Planner Group code`,State)\ngroup_by(Dataset_M$`Planner Group code`) \n\nwrite.csv(Dataset_M,'tedt.csv')\n",
    "created" : 1504628065413.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1758870474",
    "id" : "3C26FA77",
    "lastKnownWriteTime" : 1505449834,
    "last_content_update" : 1505449834,
    "path" : "~/GitHub/Projects/Customer_Satisfaction_Capstone/feature engineering.R",
    "project_path" : "feature engineering.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}