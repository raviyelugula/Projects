{
    "collab_server" : "",
    "contents" : "### Focus       \t\t: Feature Engineering on Customer Satisfaction dataset           \n### CreatedOn   \t\t: 05-sep-2017 \n### Author      \t\t: Ravindranadh \n### Location    \t\t: GreatLakes Institute of Managment, Chennai\n### ProjectName \t\t: \n### Latest Revision : V 1.0\n\n### data set Reading\nrequire(readxl)\nDataset = read_excel('Workingdata.xlsx')\nnames(Dataset)\ncolnames(Dataset) = c(colnames(Dataset[,1:17]),'Q1','Q2','Q3','Q4','Q5','Q6','Q7','Q8','Q9','Q10',colnames(Dataset[,28]),'Remarks')\n\n### Missing value Analysis\nMissing_data_Check <- function(data_set){\n  NA_Count = sapply(data_set,function(y) sum(length(which(is.na(y))))) \n  Null_Count = sapply(data_set,function(y) sum(length(which(is.null(y)))))\n  Length0_Count = sapply(data_set,function(y) sum(length(which(length(y)==0))))\n  Empty_Count = sapply(data_set,function(y) sum(length(which(y==''))))\n  Total_NonData = NA_Count+Null_Count+Length0_Count+Empty_Count\n  return( Total_NonData )\n}\n\nMissing_Values = Missing_data_Check(Dataset)\nMissingValuesPlot = barplot(Missing_Values,col = 'gray',\n                            main ='Missing Values across all attributes',\n                            xlab = '',ylab = \"Missing count\",xaxt = 'n')\ntext(x = MissingValuesPlot, y = Missing_Values,\n     label = Missing_Values,col = \"red\", cex = 0.8)\naxis(1, at=MissingValuesPlot, labels=names(Missing_Values), \n     tick=FALSE, las=2, line=-0.5, cex.axis=0.5)\n\nMissingValuesPlotQ = barplot(Missing_Values[18:27],col = 'gray',\n                             main ='Missing responses for Questions',\n                             xlab = '',ylab = \"Missing count\",xaxt = 'n')\ntext(x = MissingValuesPlotQ, y = Missing_Values[18:27],\n     label = Missing_Values[18:27],col = \"red\", cex = 0.8)\naxis(1, at=MissingValuesPlotQ, labels=names(Missing_Values[18:27]), \n     tick=FALSE, las=2, line=-0.5, cex.axis=0.5)\n\nmissing_all = subset(Dataset, is.na(Dataset$Q1) &\n                       is.na(Dataset$Q2)&\n                       is.na(Dataset$Q3)&\n                       is.na(Dataset$Q4)&\n                       is.na(Dataset$Q5)&\n                       is.na(Dataset$Q6)&\n                       is.na(Dataset$Q7)&\n                       is.na(Dataset$Q8)&\n                       is.na(Dataset$Q9)&\n                       is.na(Dataset$Q10))\n\nmissing_anyone = subset(Dataset, is.na(Dataset$Q1) |\n                          is.na(Dataset$Q2)|\n                          is.na(Dataset$Q3)|\n                          is.na(Dataset$Q4)|\n                          is.na(Dataset$Q5)|\n                          is.na(Dataset$Q6)|\n                          is.na(Dataset$Q7)|\n                          is.na(Dataset$Q8)|\n                          is.na(Dataset$Q9)|\n                          is.na(Dataset$Q10))\n\nQdataset = Dataset[,18:27]\nPdataset = Dataset[,c(1,18:28)]\nfor(i in 1:10){\n  dataset_name = paste('missing_Q',i%%11,sep='')\n  temp = subset(Qdataset, is.na(Qdataset[i%%11])&\n                  (!is.na(Qdataset[ifelse((i+1)%%10 == 0, 10 ,(i+1)%%10 )])&\n                     !is.na(Qdataset[ifelse((i+2)%%10 == 0, 10 ,(i+2)%%10 )])&\n                     !is.na(Qdataset[ifelse((i+3)%%10 == 0, 10 ,(i+3)%%10 )])&\n                     !is.na(Qdataset[ifelse((i+4)%%10 == 0, 10 ,(i+4)%%10 )])&\n                     !is.na(Qdataset[ifelse((i+5)%%10 == 0, 10 ,(i+5)%%10 )])&\n                     !is.na(Qdataset[ifelse((i+6)%%10 == 0, 10 ,(i+6)%%10 )])&\n                     !is.na(Qdataset[ifelse((i+7)%%10 == 0, 10 ,(i+7)%%10 )])&\n                     !is.na(Qdataset[ifelse((i+8)%%10 == 0, 10 ,(i+8)%%10 )])&\n                     !is.na(Qdataset[ifelse((i+9)%%10 == 0, 10 ,(i+9)%%10 )])))\n  assign(dataset_name, temp)\n}\nrm(temp)\n\n## Distribution analysis\npar(mfrow=c(2,5),oma=c(0,0,2,0))\nplot(factor(Dataset$Q1),pch=1,xlab='Question 1')\nplot(factor(Dataset$Q2),pch=2,xlab='Question 2')\nplot(factor(Dataset$Q3),pch=3,xlab='Question 3')\nplot(factor(Dataset$Q4),pch=4,xlab='Question 4')\nplot(factor(Dataset$Q5),pch=5,xlab='Question 5')\nplot(factor(Dataset$Q6),pch=6,xlab='Question 6')\nplot(factor(Dataset$Q7),pch=7,xlab='Question 7')\nplot(factor(Dataset$Q8),pch=8,xlab='Question 8')\nplot(factor(Dataset$Q9),pch=9,xlab='Question 9')\nplot(factor(Dataset$Q10),pch=10,xlab='Question 10')\ntitle(\"Frequency Distribution for all 10 Questions\",outer = T)\npar(mfrow=c(1,1))\n\npar(mfrow=c(2,5),oma=c(0,0,2,0))\nboxplot((Dataset$Q1),pch=1,xlab='Question 1')\nboxplot((Dataset$Q2),pch=2,xlab='Question 2')\nboxplot((Dataset$Q3),pch=3,xlab='Question 3')\nboxplot((Dataset$Q4),pch=4,xlab='Question 4')\nboxplot((Dataset$Q5),pch=5,xlab='Question 5')\nboxplot((Dataset$Q6),pch=6,xlab='Question 6')\nboxplot((Dataset$Q7),pch=7,xlab='Question 7')\nboxplot((Dataset$Q8),pch=8,xlab='Question 8')\nboxplot((Dataset$Q9),pch=9,xlab='Question 9')\nboxplot((Dataset$Q10),pch=10,xlab='Question 10')\ntitle(\"Box plots for all 10 Questions\",outer = T)\npar(mfrow=c(1,1))\n\nDataset2 = Dataset\nDataset2$Q1Factor = ifelse(Dataset$Q1 %in% c(1,2,3),'NotSatisfied',\n                           ifelse(Dataset$Q1 %in% c(4,5),'Satisfied',Dataset$Q1))\nDataset2$Q2Factor = ifelse(Dataset$Q2 %in% c(1,2,3),'NotSatisfied',\n                           ifelse(Dataset$Q2 %in% c(4,5),'Satisfied',Dataset$Q2))\nDataset2$Q3Factor = ifelse(Dataset$Q3 %in% c(1,2,3),'NotSatisfied',\n                           ifelse(Dataset$Q3 %in% c(4,5),'Satisfied',Dataset$Q3))\nDataset2$Q4Factor = ifelse(Dataset$Q4 %in% c(1,2,3),'NotSatisfied',\n                           ifelse(Dataset$Q4 %in% c(4,5),'Satisfied',Dataset$Q4))\nDataset2$Q5Factor = ifelse(Dataset$Q5 %in% c(1,2,3),'NotSatisfied',\n                           ifelse(Dataset$Q5 %in% c(4,5),'Satisfied',Dataset$Q5))\nDataset2$Q6Factor = ifelse(Dataset$Q6 %in% c(1,2,3),'NotSatisfied',\n                           ifelse(Dataset$Q6 %in% c(4,5),'Satisfied',Dataset$Q6))\nDataset2$Q7Factor = ifelse(Dataset$Q7 %in% c(1,2,3),'NotSatisfied',\n                           ifelse(Dataset$Q7 %in% c(4,5),'Satisfied',Dataset$Q7))\nDataset2$Q8Factor = ifelse(Dataset$Q8 %in% c(1,2,3),'NotSatisfied',\n                           ifelse(Dataset$Q8 %in% c(4,5),'Satisfied',Dataset$Q8))\nDataset2$Q9Factor = ifelse(Dataset$Q9 %in% c(1,2,3),'NotSatisfied',\n                           ifelse(Dataset$Q9 %in% c(4,5),'Satisfied',Dataset$Q9))\nDataset2$Q10Factor = ifelse(Dataset$Q10 %in% c(1,2,3),'NotSatisfied',\n                           ifelse(Dataset$Q10 %in% c(4,5),'Satisfied',Dataset$Q10))\n\npar(mfrow=c(2,5),oma=c(0,0,2,0))\nplot(factor(Dataset2$Q1Factor),pch=1,xlab='Question 1')\nplot(factor(Dataset2$Q2Factor),pch=2,xlab='Question 2')\nplot(factor(Dataset2$Q3Factor),pch=3,xlab='Question 3')\nplot(factor(Dataset2$Q4Factor),pch=4,xlab='Question 4')\nplot(factor(Dataset2$Q5Factor),pch=5,xlab='Question 5')\nplot(factor(Dataset2$Q6Factor),pch=6,xlab='Question 6')\nplot(factor(Dataset2$Q7Factor),pch=7,xlab='Question 7')\nplot(factor(Dataset2$Q8Factor),pch=8,xlab='Question 8')\nplot(factor(Dataset2$Q9Factor),pch=9,xlab='Question 9')\nplot(factor(Dataset2$Q10Factor),pch=10,xlab='Question 10')\ntitle(\"Frequency Distribution for all 10 Questions as 2 Factors\",outer = T)\npar(mfrow=c(1,1))\n\n\nNames = c('missing_all','missing_anyone','missing_Q1','missing_Q2','missing_Q3',\n          'missing_Q4','missing_Q5','missing_Q6','missing_Q7','missing_Q8',\n          'missing_Q9','missing_Q10')\nMissing_Counts = c(nrow(missing_all),nrow(missing_anyone),nrow(missing_Q1),nrow(missing_Q2),nrow(missing_Q3),\n                   nrow(missing_Q4),nrow(missing_Q5),nrow(missing_Q6),nrow(missing_Q7),nrow(missing_Q8),\n                   nrow(missing_Q9),nrow(missing_Q10))\nnames(Missing_Counts) = Names\nMissingCountPlot = barplot(Missing_Counts,col = 'gray',\n                           main ='Missing Value trend',\n                           xlab = '',ylab = \"Missing count\",xaxt = 'n')\ntext(x = MissingCountPlot, y = Missing_Counts,\n     label = Missing_Counts,col = \"red\", cex = 0.8,font = 2)\naxis(1, at=MissingCountPlot, labels=names(Missing_Counts), \n     tick=FALSE, las=2, line=-0.5, cex.axis=0.8)\n\n### Correlation Analysis on Questions data\nQdataset_no_missing=Qdataset[!apply(Qdataset, 1, function(x) any(x==\"\" | is.na(x))),] \nPdataset_no_missing=Pdataset[!apply(Pdataset, 1, function(x) any(x==\"\" | is.na(x))),] \n\nCorrelation=cor(Qdataset_no_missing)\nrequire(corrplot)\nrequire(RColorBrewer)\n\ncorrplot(Correlation, type=\"upper\",\n         method = 'circle' ,order=\"hclust\", add = F,\n         col=brewer.pal(n=4, name=\"RdBu\"),  \n         outline = T)\nrm(list = Names)\n\n### Multicollinearity check\nrequire(usdm)\nvif(data.frame(Qdataset_no_missing)) ## VIF >4 can be consider for multicolinearity\n\n### Factor Analysis on Non missing data set of 10 Questions\nrequire(psych)\npca = principal(Pdataset_no_missing[,2:11],nfactors = 10,rotate = 'none')\npca\nplot(pca$values,type=\"b\",col = 'tomato',\n     xlab = 'Components',ylab = 'Engine Values',\n     main = 'Scree plot for all possible components') # Scree Plot\n\npca_reduced = principal(Pdataset_no_missing[,2:11], nfactors = 6, rotate = 'none')\npca_reduced\n\npca_rotated = principal(Pdataset_no_missing[,2:11], nfactors = 6, rotate = 'varimax')\npca_rotated\n\nrm(Correlation)\nPdataset_no_missing_scaled = scale(Pdataset_no_missing[,2:12])\nPdataset_no_missing_master = cbind(Pdataset_no_missing,pca_rotated$scores,\n                                   Scaled_Satindex=Pdataset_no_missing_scaled[,11])\n#orthogonality\nround(pca_rotated$r.scores,5) #after factorizaation\nround(cor(Pdataset_no_missing_master[13:18]),5) #after factorizaation - same code but default function\nround(cor(Pdataset_no_missing_master[2:11]),5) #before factorizaation\n#Regression on Factors - entire non missing data \nn = names(Pdataset_no_missing_master[13:18])\nformula = as.formula(paste(\"Scaled_Satindex ~\", paste(n, collapse = \" + \")))\nLinear_regression = lm(formula,\n                       data = Pdataset_no_missing_master)\nsummary(Linear_regression)\n\n### With 2 Factors \npca_reduced2 = principal(Pdataset_no_missing[,2:11], nfactors = 2, rotate = 'none')\npca_reduced2\n\npca_rotated2 = principal(Pdataset_no_missing[,2:11], nfactors = 2, rotate = 'varimax')\npca_rotated2\n\nPdataset_no_missing_scaled2 = scale(Pdataset_no_missing[,2:12])\nPdataset_no_missing_master2 = cbind(Pdataset_no_missing,pca_rotated2$scores,\n                                    Scaled_Satindex=Pdataset_no_missing_scaled2[,11])\n#orthogonality\nround(pca_rotated2$r.scores,5) #after factorizaation\nround(cor(Pdataset_no_missing_master2[13:14]),5) #after factorizaation - same code but default function\nround(cor(Pdataset_no_missing_master2[2:11]),5) #before factorizaation\n#Regression on Factors - entire non missing data \nn2 = names(Pdataset_no_missing_master2[13:14])\nformula2 = as.formula(paste(\"Scaled_Satindex ~\", paste(n2, collapse = \" + \")))\nLinear_regression2 = lm(formula2,\n                        data = Pdataset_no_missing_master2)\nsummary(Linear_regression2)\n\n## Clustering\nQdataset_no_missing=Qdataset[!apply(Qdataset, 1, function(x) any(x==\"\" | is.na(x))),] \nCdataset = Dataset[,c(1:6,11:12,28)]\nCdataset_no_missing=Cdataset[!apply(Cdataset,1,function(x) any(x==\"\" | is.na(x))),]\nKMeans_Cdataset = Cdataset_no_missing[,c(4,6,7,8,9)]\nKMeans_Cdataset$Month = factor(KMeans_Cdataset$Month,\n                               labels = c(1:length(unique(KMeans_Cdataset$Month))))\nKMeans_Cdataset$`Planner Group code` = factor(KMeans_Cdataset$`Planner Group code`,\n                                              labels = c(1:length(unique(KMeans_Cdataset$`Planner Group code`))))\nKMeans_Cdataset$Product = factor(KMeans_Cdataset$Product,\n                                 labels = c(1,2))\nwcss = vector()\nset.seed(123)\nfor (i in 1:25) wcss[i] = sum(kmeans(KMeans_Cdataset[3:4], i)$withinss)\nplot(x = 1:25,\n     y = wcss,\n     type = 'b',\n     main = paste('The Elbow Method'),\n     xlab = 'Number of clusters',\n     ylab = 'WCSS')\n\n\nset.seed(123)\nkmeans = kmeans(x = KMeans_Cdataset[3], centers = 4)\ny_kmeans = kmeans$cluster\n\n### Missing Value handling - State\nDataset_M = Dataset\nDataset_M[which(Dataset_M$State == 'Chattisgarh'),'State'] = 'Chhattisgarh'\nDataset_M[which(Dataset_M$State == 'Orissa'),'State'] = 'Odisha'\nDataset_M[which(Dataset_M$State == 'W Bengal'),'State'] = 'West Bengal'\nDataset_M[which(Dataset_M$State == 'TN'),'State'] = 'Tamil Nadu'\n\nDataset_M$State = tolower(trimws(Dataset_M$State))\nDataset_M$`City-final` = tolower(trimws(Dataset_M$`City-final`))\nDataset_M$City = tolower(trimws(Dataset_M$City))\nDataset_M$Location = tolower(trimws(Dataset_M$Location))\n\nStates_Cities = read_excel(path = 'Cities_States.xlsx')\nStates_Cities$`Name of City` = trimws(tolower(States_Cities$`Name of City`),which = 'both')\nStates_Cities$State = trimws(tolower(States_Cities$State),which = 'both')\n\nDataset_M$State = trimws(tolower(Dataset_M$State),which = 'both')\nDataset_M$Location = trimws(tolower(Dataset_M$Location),which = 'both')\n\n### Missing States handling with the help of location\nrequire(readxl)\nLocations_Assigned = read_excel(path = 'data/Cities_States.xlsx')\nexcel_sheets(path = 'data/Workingdata.xlsx')\nLocations_Missed = read_excel(path = 'data/Workingdata.xlsx',sheet = 'State_City_Missing')\n\nLocations_Assigned$Location = tolower(trimws(Locations_Assigned$Location))\nLocations_Missed$Location = tolower(trimws(Locations_Missed$Location))\n\nrequire(stringdist)\nDistanceNameMatrix<-matrix(NA, ncol = length(Locations_Missed$Location),\n                           nrow = length(Locations_Assigned$Location))\nfor(i in 1:length(Locations_Missed$Location)) {\n  for(j in 1:length(Locations_Assigned$Location)) { \n    DistanceNameMatrix[j,i]<-stringdist(tolower(Locations_Missed[i,]$Location),\n                                        tolower(Locations_Assigned[j,]$Location),\n                                        method ='jw')      \n  }\n}\n\nMatch_Location_DF<-NULL\nMinName<-apply(DistanceNameMatrix, 1, base::min)\nfor(i in 1:nrow(DistanceNameMatrix)){\n  S2<-match(MinName[i],DistanceNameMatrix[i,])\n  S1<-i\n  Match_Location_DF<-rbind(data.frame(Missed_Id=S2,Assigned_Id=S1,\n                                      Missed=Locations_Missed[S2,]$Location, \n                                      Assigned=Locations_Assigned[S1,]$Location, \n                                      adist=MinName[i],\n                                      method='jm'),\n                           Match_Location_DF)\n}\n\nMatch_Location_DF = Match_Location_DF[Match_Location_DF$adist<=0.05,]   \nMatch_Location_DF = Match_Location_DF[order(Match_Location_DF$Assigned_Id),]\nMatch_Location_DF = Match_Location_DF[!duplicated(Match_Location_DF[,3:4]),] \n\nfor(i in 1:nrow(Match_Location_DF)){\n  temp_Assigned_Id = Match_Location_DF$Assigned_Id[i]\n  temp_state = Locations_Assigned$State[temp_Assigned_Id]\n  temp_location = as.character(Match_Location_DF$Missed[i])\n  Dataset_M = within(Dataset_M,State[Location == temp_location ] <- temp_state) \n}  ### 4546 state are mapped !!!\n\n#write.csv(Dataset_M,'test.csv')\n\n### Missing States handling with the help of Cities\nexcel_sheets(path = 'data/Workingdata.xlsx')\nCities_Missed = read_excel(path = 'data/Workingdata.xlsx',sheet = 'State_Missing_CityDetails')\n\nLocations_Assigned$Location = tolower(trimws(Locations_Assigned$Location))\nCities_Missed$City = tolower(trimws(Cities_Missed$City))\n\nDistanceNameMatrix<-matrix(NA, ncol = length(Cities_Missed$City),\n                           nrow = length(Locations_Assigned$Location))\nfor(i in 1:length(Cities_Missed$City)) {\n  for(j in 1:length(Locations_Assigned$Location)) { \n    DistanceNameMatrix[j,i]<-stringdist(tolower(Cities_Missed[i,]$City),\n                                        tolower(Locations_Assigned[j,]$Location),\n                                        method ='jw')      \n  }\n}\n\nMatch_Location_DF<-NULL\nMinName<-apply(DistanceNameMatrix, 1, base::min)\nfor(i in 1:nrow(DistanceNameMatrix)){\n  S2<-match(MinName[i],DistanceNameMatrix[i,])\n  S1<-i\n  Match_Location_DF<-rbind(data.frame(Missed_Id=S2,Assigned_Id=S1,\n                                      Missed=Cities_Missed[S2,]$City, \n                                      Assigned=Locations_Assigned[S1,]$Location, \n                                      adist=MinName[i],\n                                      method='jm'),\n                           Match_Location_DF)\n}\nbackup_Match_Location_DF = Match_Location_DF\n\nMatch_Location_DF = Match_Location_DF[Match_Location_DF$adist==0,]   \nMatch_Location_DF = Match_Location_DF[order(Match_Location_DF$Assigned_Id),]\nMatch_Location_DF = Match_Location_DF[!duplicated(Match_Location_DF[,3:4]),] \n\nfor(i in 1:nrow(Match_Location_DF)){\n  temp_Assigned_Id = Match_Location_DF$Assigned_Id[i]\n  temp_state = Locations_Assigned$State[temp_Assigned_Id]\n  temp_location = as.character(Match_Location_DF$Missed[i])\n  Dataset_M = within(Dataset_M,State[Location == temp_location ] <- temp_state) \n}  ### 3257 state are mapped !!!\n\nwrite.csv(Dataset_M,'Dataset_M.csv',row.names = F)\n\n\n## Clustering based on States\nOrderState = read_excel('StateOrder.xlsx')\nOriginaldata = read.csv('Dataset_M.csv',header = T)\nOriginaldata$State = tolower(trimws(Originaldata$State))\nOriginaldata= Originaldata %>%\n  left_join(OrderState,by='State')\nOriginaldata=Originaldata[-(which(is.na(Originaldata$Planner.Group.code))),]\nOriginaldata$StateNames = Originaldata$State\nOriginaldata$Planner.Group.code = factor(Originaldata$Planner.Group.code,\n                                         labels = c(1:length(unique(Originaldata$Planner.Group.code))))\nOriginaldata$State = factor(Originaldata$State,\n                            labels = c(1:22))\nOriginaldata$Product = factor(Originaldata$Product,\n                              labels = c(1:length(unique(Originaldata$Product))))\nset.seed(123)\nkmeans = kmeans(x = Originaldata[11:12], centers = 4)\nOriginaldata$clusterCode = kmeans$cluster\n\n\nOriginaldata = Originaldata[,c(11,12,15,30,31,32)]\nrequire(plyr)\nrequire(dplyr)\nrequire(ggplot2)\nOriginaldata = ddply(Originaldata, .(Planner.Group.code), mutate, count = length(unique(State)))\n\nOriginaldata %>% \n  ggplot(aes(x = State, y = Planner.Group.code,\n             color= factor(count),shape =factor(clusterCode)))+\n  geom_point()+\n  ggtitle('Cluster(Planner_Product) across states')+\n  xlab('State Codes')+ylab('Planner Codes')+\n  scale_x_discrete(labels = levels(factor(Originaldata$OrderState)))+\n  theme(axis.text.x = element_text(angle = 90, hjust = 1))\n\nOriginaldata %>% \n  ggplot(aes(x = State, y = Planner.Group.code,\n             color= factor(count)))+\n  geom_point()+\n  ggtitle('PlannerCodes across states')+\n  xlab('State Codes')+ylab('Planner Codes')+\n  #scale_x_discrete(labels = levels(factor(Originaldata$OrderState)))+\n  theme(axis.text.x = element_text(angle = 90, hjust = 1))\n\n## State wise score analysis\nOrderState = read_excel('StateOrder.xlsx')\nOriginaldata = read.csv('Dataset_M.csv',header = T)\nOriginaldata$State = tolower(trimws(Originaldata$State))\nOriginaldata= Originaldata %>%\n  left_join(OrderState,by='State')\n\nOriginaldata$Q1Factor = ifelse(Originaldata$Q1 %in% c(1,2,3),'NotSatisfied',\n                           ifelse(Originaldata$Q1 %in% c(4,5),'Satisfied',Originaldata$Q1))\nOriginaldata$Q2Factor = ifelse(Originaldata$Q2 %in% c(1,2,3),'NotSatisfied',\n                           ifelse(Originaldata$Q2 %in% c(4,5),'Satisfied',Originaldata$Q2))\nOriginaldata$Q3Factor = ifelse(Originaldata$Q3 %in% c(1,2,3),'NotSatisfied',\n                           ifelse(Originaldata$Q3 %in% c(4,5),'Satisfied',Originaldata$Q3))\nOriginaldata$Q4Factor = ifelse(Originaldata$Q4 %in% c(1,2,3),'NotSatisfied',\n                           ifelse(Originaldata$Q4 %in% c(4,5),'Satisfied',Originaldata$Q4))\nOriginaldata$Q5Factor = ifelse(Originaldata$Q5 %in% c(1,2,3),'NotSatisfied',\n                           ifelse(Originaldata$Q5 %in% c(4,5),'Satisfied',Originaldata$Q5))\nOriginaldata$Q6Factor = ifelse(Originaldata$Q6 %in% c(1,2,3),'NotSatisfied',\n                           ifelse(Originaldata$Q6 %in% c(4,5),'Satisfied',Originaldata$Q6))\nOriginaldata$Q7Factor = ifelse(Originaldata$Q7 %in% c(1,2,3),'NotSatisfied',\n                           ifelse(Originaldata$Q7 %in% c(4,5),'Satisfied',Originaldata$Q7))\nOriginaldata$Q8Factor = ifelse(Originaldata$Q8 %in% c(1,2,3),'NotSatisfied',\n                           ifelse(Originaldata$Q8 %in% c(4,5),'Satisfied',Originaldata$Q8))\nOriginaldata$Q9Factor = ifelse(Originaldata$Q9 %in% c(1,2,3),'NotSatisfied',\n                           ifelse(Originaldata$Q9 %in% c(4,5),'Satisfied',Originaldata$Q9))\nOriginaldata$Q10Factor = ifelse(Originaldata$Q10 %in% c(1,2,3),'NotSatisfied',\n                            ifelse(Originaldata$Q10 %in% c(4,5),'Satisfied',Originaldata$Q10))\nOriginaldata %>%\n  group_by(State)%>%\n  ggplot(aes(Q10Factor))+\n  facet_wrap(~State, scales = \"free_x\")+\n  geom_bar()+\n  ggtitle('Question 10 Responses across states')+xlab('')+ylab('')\nOriginaldata %>%\n  group_by(State)%>%\n  ggplot(aes(Q9Factor))+\n  facet_wrap(~State, scales = \"free_x\")+\n  geom_bar()+\n  ggtitle('Question 09 Responses across states')+xlab('')+ylab('')\nOriginaldata %>%\n  group_by(State)%>%\n  ggplot(aes(Q8Factor))+\n  facet_wrap(~State, scales = \"free_x\")+\n  geom_bar()+\n  ggtitle('Question 08 Responses across states')+xlab('')+ylab('')\nOriginaldata %>%\n  group_by(State)%>%\n  ggplot(aes(Q7Factor))+\n  facet_wrap(~State, scales = \"free_x\")+\n  geom_bar()+\n  ggtitle('Question 07 Responses across states')+xlab('')+ylab('')\nOriginaldata %>%\n  group_by(State)%>%\n  ggplot(aes(Q6Factor))+\n  facet_wrap(~State, scales = \"free_x\")+\n  geom_bar()+\n  ggtitle('Question 06 Responses across states')+xlab('')+ylab('')\nOriginaldata %>%\n  group_by(State)%>%\n  ggplot(aes(Q5Factor))+\n  facet_wrap(~State, scales = \"free_x\")+\n  geom_bar()+\n  ggtitle('Question 05 Responses across states')+xlab('')+ylab('')\nOriginaldata %>%\n  group_by(State)%>%\n  ggplot(aes(Q4Factor))+\n  facet_wrap(~State, scales = \"free_x\")+\n  geom_bar()+\n  ggtitle('Question 04 Responses across states')+xlab('')+ylab('')\nOriginaldata %>%\n  group_by(State)%>%\n  ggplot(aes(Q3Factor))+\n  facet_wrap(~State, scales = \"free_x\")+\n  geom_bar()+\n  ggtitle('Question 03 Responses across states')+xlab('')+ylab('')\nOriginaldata %>%\n  group_by(State)%>%\n  ggplot(aes(Q2Factor))+\n  facet_wrap(~State, scales = \"free_x\")+\n  geom_bar()+\n  ggtitle('Question 02 Responses across states')+xlab('')+ylab('')\nOriginaldata %>%\n  group_by(State)%>%\n  ggplot(aes(Q1Factor))+\n  facet_wrap(~State, scales = \"free_x\")+\n  geom_bar()+\n  ggtitle('Question 01 Responses across states')+xlab('')+ylab('')\n\nOriginaldata %>%\n  ggplot(aes(State))+\n  geom_bar()+\n  ggtitle('State wise records count')+\n  theme(axis.text.x = element_text(angle = 90, hjust = 1))\n\n## year wise Question \nOriginaldata %>%\n  ggplot(aes(Year))+\n  geom_bar()+\n  ggtitle('Year wise records count')+\n  theme(axis.text.x = element_text(angle = 90, hjust = 1))\n\nqplot(Year,..count..,data = Originaldata_Sub,\n      geom = 'bar')\n\nOriginaldata %>%\n  group_by(Year)%>%\n  ggplot(aes(Q9Factor))+\n  facet_wrap(~Year, scales = \"free_x\")+\n  geom_bar()+\n  ggtitle('Question 09 Responses across Years')+xlab('')+ylab('')\nOriginaldata %>%\n  group_by(Year)%>%\n  ggplot(aes(Q8Factor))+\n  facet_wrap(~Year, scales = \"free_x\")+\n  geom_bar()+\n  ggtitle('Question 08 Responses across Years')+xlab('')+ylab('')\nOriginaldata %>%\n  group_by(Year)%>%\n  ggplot(aes(Q7Factor))+\n  facet_wrap(~Year, scales = \"free_x\")+\n  geom_bar()+\n  ggtitle('Question 07 Responses across Years')+xlab('')+ylab('')\nOriginaldata %>%\n  group_by(Year)%>%\n  ggplot(aes(Q6Factor))+\n  facet_wrap(~Year, scales = \"free_x\")+\n  geom_bar()+\n  ggtitle('Question 06 Responses across Years')+xlab('')+ylab('')\nOriginaldata %>%\n  group_by(Year)%>%\n  ggplot(aes(Q5Factor))+\n  facet_wrap(~Year, scales = \"free_x\")+\n  geom_bar()+\n  ggtitle('Question 05 Responses across Years')+xlab('')+ylab('')\nOriginaldata %>%\n  group_by(Year)%>%\n  ggplot(aes(Q4Factor))+\n  facet_wrap(~Year, scales = \"free_x\")+\n  geom_bar()+\n  ggtitle('Question 04 Responses across Years')+xlab('')+ylab('')\nOriginaldata %>%\n  group_by(Year)%>%\n  ggplot(aes(Q3Factor))+\n  facet_wrap(~Year, scales = \"free_x\")+\n  geom_bar()+\n  ggtitle('Question 03 Responses across Years')+xlab('')+ylab('')\nOriginaldata %>%\n  group_by(Year)%>%\n  ggplot(aes(Q2Factor))+\n  facet_wrap(~Year, scales = \"free_x\")+\n  geom_bar()+\n  ggtitle('Question 02 Responses across Years')+xlab('')+ylab('')\nOriginaldata %>%\n  group_by(Year)%>%\n  ggplot(aes(Q1Factor))+\n  facet_wrap(~Year, scales = \"free_x\")+\n  geom_bar()+\n  ggtitle('Question 01 Responses across Years')+xlab('')+ylab('')\n\n\n### should work on -- Planner group and State relation\n\n# length(unique(Dataset_M$`Planner Group code`))\n# require(dplyr)\n# Planner_State_count=Dataset_M %>%\n#   group_by(Dataset_M$`Planner Group code`) %>%\n#   summarise(ifelse(sum(is.na(State))>0,n_distinct(State)-1,n_distinct(State)))\n# Planner_State_count = as.data.frame(Planner_State_count)\n# colnames(Planner_State_count) = c('PlannerGroupCode','State_Count')\n# Planner_State_count\n# \n# Planner_State_count2=Dataset_M %>%select(`Planner Group code`,State)\n# group_by(Dataset_M$`Planner Group code`) \n# \n# write.csv(Dataset_M,'tedt.csv')\n",
    "created" : 1504628065413.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2839551056",
    "id" : "3C26FA77",
    "lastKnownWriteTime" : 1505880906,
    "last_content_update" : 1505880906629,
    "path" : "~/GitHub/Projects/Customer_Satisfaction_Capstone/feature engineering.R",
    "project_path" : "feature engineering.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}