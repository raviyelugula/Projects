{
    "collab_server" : "",
    "contents" : "### Missing States handling with the help of location\nDataset$StateCorrected = Dataset$State\nDataset[which(Dataset$StateCorrected == 'Chattisgarh'),'StateCorrected'] = 'Chhattisgarh'\nDataset[which(Dataset$StateCorrected == 'Orissa'),'StateCorrected'] = 'Odisha'\nDataset[which(Dataset$StateCorrected == 'W Bengal'),'StateCorrected'] = 'West Bengal'\nDataset[which(Dataset$StateCorrected == 'TN'),'StateCorrected'] = 'Tamil Nadu'\n\nDataset$StateCorrected = tolower(trimws(Dataset$StateCorrected))\nDataset$`City-final` = tolower(trimws(Dataset$`City-final`))\nDataset$City = tolower(trimws(Dataset$City))\nDataset$Location = tolower(trimws(Dataset$Location))\n\nStates_Cities = read_excel(path = 'Cities_States.xlsx')\nStates_Cities$`Name of City` = trimws(tolower(States_Cities$`Name of City`),which = 'both')\nStates_Cities$State = trimws(tolower(States_Cities$State),which = 'both')\n\nDataset$StateCorrected = trimws(tolower(Dataset$StateCorrected),which = 'both')\nDataset$Location = trimws(tolower(Dataset$Location),which = 'both')\n\n# Mapping based on loaction\nrequire(readxl)\nLocations_Assigned = read_excel(path = 'data/Cities_States.xlsx')\nLocations_Missed = read_excel(path = 'data/Workingdata.xlsx',sheet = 'State_City_Missing')\n\nLocations_Assigned$Location = tolower(trimws(Locations_Assigned$Location))\nLocations_Missed$Location = tolower(trimws(Locations_Missed$Location))\n\nrequire(stringdist)\nDistanceNameMatrix<-matrix(NA, ncol = length(Locations_Missed$Location),\n                           nrow = length(Locations_Assigned$Location))\nfor(i in 1:length(Locations_Missed$Location)) {\n  for(j in 1:length(Locations_Assigned$Location)) { \n    DistanceNameMatrix[j,i]<-stringdist(tolower(Locations_Missed[i,]$Location),\n                                        tolower(Locations_Assigned[j,]$Location),\n                                        method ='jw')      \n  }\n}\n\nMatch_Location_DF<-NULL\nMinName<-apply(DistanceNameMatrix, 1, base::min)\nfor(i in 1:nrow(DistanceNameMatrix)){\n  S2<-match(MinName[i],DistanceNameMatrix[i,])\n  S1<-i\n  Match_Location_DF<-rbind(data.frame(Missed_Id=S2,Assigned_Id=S1,\n                                      Missed=Locations_Missed[S2,]$Location, \n                                      Assigned=Locations_Assigned[S1,]$Location, \n                                      adist=MinName[i],\n                                      method='jm'),\n                           Match_Location_DF)\n}\n\nMatch_Location_DF = Match_Location_DF[Match_Location_DF$adist<=0.05,]   \nMatch_Location_DF = Match_Location_DF[order(Match_Location_DF$Assigned_Id),]\nMatch_Location_DF = Match_Location_DF[!duplicated(Match_Location_DF[,3:4]),] \n\nfor(i in 1:nrow(Match_Location_DF)){\n  temp_Assigned_Id = Match_Location_DF$Assigned_Id[i]\n  temp_state = Locations_Assigned$State[temp_Assigned_Id]\n  temp_location = as.character(Match_Location_DF$Missed[i])\n  Dataset = within(Dataset,StateCorrected[Location == temp_location ] <- temp_state) \n}  ### 4546 state are mapped !!!\n\n# Mapping based on City\nexcel_sheets(path = 'data/Workingdata.xlsx')\nCities_Missed = read_excel(path = 'data/Workingdata.xlsx',sheet = 'State_Missing_CityDetails')\n\nLocations_Assigned$Location = tolower(trimws(Locations_Assigned$Location))\nCities_Missed$City = tolower(trimws(Cities_Missed$City))\n\nDistanceNameMatrix<-matrix(NA, ncol = length(Cities_Missed$City),\n                           nrow = length(Locations_Assigned$Location))\nfor(i in 1:length(Cities_Missed$City)) {\n  for(j in 1:length(Locations_Assigned$Location)) { \n    DistanceNameMatrix[j,i]<-stringdist(tolower(Cities_Missed[i,]$City),\n                                        tolower(Locations_Assigned[j,]$Location),\n                                        method ='jw')      \n  }\n}\n\nMatch_Location_DF<-NULL\nMinName<-apply(DistanceNameMatrix, 1, base::min)\nfor(i in 1:nrow(DistanceNameMatrix)){\n  S2<-match(MinName[i],DistanceNameMatrix[i,])\n  S1<-i\n  Match_Location_DF<-rbind(data.frame(Missed_Id=S2,Assigned_Id=S1,\n                                      Missed=Cities_Missed[S2,]$City, \n                                      Assigned=Locations_Assigned[S1,]$Location, \n                                      adist=MinName[i],\n                                      method='jm'),\n                           Match_Location_DF)\n}\n\nMatch_Location_DF = Match_Location_DF[Match_Location_DF$adist==0,]   \nMatch_Location_DF = Match_Location_DF[order(Match_Location_DF$Assigned_Id),]\nMatch_Location_DF = Match_Location_DF[!duplicated(Match_Location_DF[,3:4]),] \nfor(i in 1:nrow(Match_Location_DF)){\n  temp_Assigned_Id = Match_Location_DF$Assigned_Id[i]\n  temp_state = Locations_Assigned$State[temp_Assigned_Id]\n  temp_location = as.character(Match_Location_DF$Missed[i])\n  Dataset = within(Dataset,StateCorrected[Location == temp_location ] <- temp_state) \n}  ### 3257 state are mapped !!!\n\n# Corrected State wise Analysis\nOrderState = read_excel('StateOrder.xlsx')\nDataset$StateCorrected = tolower(trimws(Dataset$StateCorrected))\nDataset = Dataset %>%\n  left_join(OrderState,by='StateCorrected')\n\nGGBarPlot_Facet <- function(dataset,title){\n  colnames(dataset) = c('X','Y')\n  dataset %>%\n    group_by(X)%>%\n    ggplot(aes(Y))+\n    facet_wrap(~X, scales = \"free_x\")+\n    geom_bar(fill=barColour)+\n    ggtitle(paste('Question',title,'Response across states'))+xlab('')+ylab('')\n}\n\nfor(i in 30:39){\n  print(GGBarPlot_Facet(Dataset[,c(40,i)],i-29))\n}\nDataset %>%\n  ggplot(aes(StateCorrected))+\n  geom_bar()+\n  ggtitle('State wise records count')+\n  theme(axis.text.x = element_text(angle = 90, hjust = 1))\n\n# Year wise analysis\nGGplotYoYLinePlot <- function(dataset,i){\n  colnames(dataset) = c('Y','D')\n  dataset %>%\n    group_by(Y,D)%>%\n    summarise(records = length(D))%>%\n    ggplot(aes(Y,records,colour = D))+\n    guides(colour=guide_legend(title='Rating Index'))+\n    geom_line()+ggtitle(paste('Question',i,'Rating over the years'))+\n    xlab('Years')+ylab('No of Records')\n}\nfor(i in 30:39){\n  print(GGplotYoYLinePlot(Dataset[,c(4,i)],i-29))\n}\n\nqplot(Year,..count..,data = Dataset,\n      geom = 'bar',main='Year wise records count')\n \nCustomerBasedDataset = Dataset[,c(4,5,8,9,10,12,15,13,11,14,28,29,40)][!apply(Dataset[,14], 1, function(x) any(x==\"\" | is.na(x))),] \nCustomerBasedDataset = CustomerBasedDataset[order(CustomerBasedDataset$`Customer name`,CustomerBasedDataset$`Month&Year`),]\nrepeatedCustRecIds = which(duplicated(CustomerBasedDataset$`Customer name`))\nrepeatedCustRecIds = sort(unique(c(repeatedCustRecIds,repeatedCustRecIds-1)))\nCustomerBasedDataset_Repeated = CustomerBasedDataset[repeatedCustRecIds,]\nNotifNoBasedDataset = Dataset[,c(4,5,8,9,10,12,13,15,11,14,28,29,40)][!apply(Dataset[,9], 1, function(x) any(x==\"\" | is.na(x))),] \nNotifNoBasedDataset = NotifNoBasedDataset[order(NotifNoBasedDataset$`Notification no`,NotifNoBasedDataset$`Month&Year`),]\nrepeatedNotifNoIds = which(duplicated(NotifNoBasedDataset$`Notification no`))\nrepeatedNotifNoIds = sort(unique(c(repeatedNotifNoIds,repeatedNotifNoIds-1)))\nNotifNoBasedDataset_Repeated = NotifNoBasedDataset[repeatedNotifNoIds,]\nStateWiseDF_List = split(Dataset,f = Dataset$StateCorrected)\n\nDataset_FIE = subset(Dataset,Dataset$Product=='FIE')\nDataset_AE = subset(Dataset,Dataset$Product=='AE')\nStateWiseDF_List_FIE = split(Dataset_FIE,f = Dataset_FIE$StateCorrected)\nStateWiseDF_List_AE = split(Dataset_AE,f = Dataset_AE$StateCorrected)                                                                             \n\n\n",
    "created" : 1505926346212.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1652824386",
    "id" : "CC0260DF",
    "lastKnownWriteTime" : 1511204229,
    "last_content_update" : 1511204229,
    "path" : "~/GitHub/Projects/Customer_Satisfaction_Capstone/Cluster_Analysis.R",
    "project_path" : "Cluster_Analysis.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}