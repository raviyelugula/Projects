adist=MinName[i],
method='jm'),
Match_Location_DF)
}
Match_Location_DF = Match_Location_DF[Match_Location_DF$adist<=0.05,]
Match_Location_DF = Match_Location_DF[order(Match_Location_DF$Assigned_Id),]
Match_Location_DF = Match_Location_DF[!duplicated(Match_Location_DF[,3:4]),]
for(i in 1:nrow(Match_Location_DF)){
temp_Assigned_Id = Match_Location_DF$Assigned_Id[i]
temp_state = Locations_Assigned$State[temp_Assigned_Id]
temp_location = as.character(Match_Location_DF$Missed[i])
Dataset = within(Dataset,StateCorrected[Location == temp_location ] <- temp_state)
}  ### 4546 state are mapped !!!
excel_sheets(path = 'data/Workingdata.xlsx')
Cities_Missed = read_excel(path = 'data/Workingdata.xlsx',sheet = 'State_Missing_CityDetails')
Locations_Assigned$Location = tolower(trimws(Locations_Assigned$Location))
Cities_Missed$City = tolower(trimws(Cities_Missed$City))
DistanceNameMatrix<-matrix(NA, ncol = length(Cities_Missed$City),
nrow = length(Locations_Assigned$Location))
for(i in 1:length(Cities_Missed$City)) {
for(j in 1:length(Locations_Assigned$Location)) {
DistanceNameMatrix[j,i]<-stringdist(tolower(Cities_Missed[i,]$City),
tolower(Locations_Assigned[j,]$Location),
method ='jw')
}
}
Match_Location_DF<-NULL
MinName<-apply(DistanceNameMatrix, 1, base::min)
for(i in 1:nrow(DistanceNameMatrix)){
S2<-match(MinName[i],DistanceNameMatrix[i,])
S1<-i
Match_Location_DF<-rbind(data.frame(Missed_Id=S2,Assigned_Id=S1,
Missed=Cities_Missed[S2,]$City,
Assigned=Locations_Assigned[S1,]$Location,
adist=MinName[i],
method='jm'),
Match_Location_DF)
}
Match_Location_DF = Match_Location_DF[Match_Location_DF$adist==0,]
Match_Location_DF = Match_Location_DF[order(Match_Location_DF$Assigned_Id),]
Match_Location_DF = Match_Location_DF[!duplicated(Match_Location_DF[,3:4]),]
for(i in 1:nrow(Match_Location_DF)){
temp_Assigned_Id = Match_Location_DF$Assigned_Id[i]
temp_state = Locations_Assigned$State[temp_Assigned_Id]
temp_location = as.character(Match_Location_DF$Missed[i])
Dataset = within(Dataset,StateCorrected[Location == temp_location ] <- temp_state)
}  ### 3257 state are mapped !!!
OrderState = read_excel('StateOrder.xlsx')
Dataset$StateCorrected = tolower(trimws(Dataset$StateCorrected))
Dataset = Dataset %>%
left_join(OrderState,by='StateCorrected')
GGBarPlot_Facet <- function(dataset,title){
colnames(dataset) = c('X','Y')
dataset %>%
group_by(X)%>%
ggplot(aes(Y))+
facet_wrap(~X, scales = "free_x")+
geom_bar(fill=barColour)+
ggtitle(paste('Question',title,'Response across states'))+xlab('')+ylab('')
}
for(i in 30:39){
print(GGBarPlot_Facet(Dataset[,c(40,i)],i-29))
}
Dataset %>%
ggplot(aes(StateCorrected))+
geom_bar()+
ggtitle('State wise records count')+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
GGplotYoYLinePlot <- function(dataset,i){
colnames(dataset) = c('Y','D')
dataset %>%
group_by(Y,D)%>%
summarise(records = length(D))%>%
ggplot(aes(Y,records,colour = D))+
guides(colour=guide_legend(title='Rating Index'))+
geom_line()+ggtitle(paste('Question',i,'Rating over the years'))+
xlab('Years')+ylab('No of Records')
}
for(i in 30:39){
print(GGplotYoYLinePlot(Dataset[,c(4,i)],i-29))
}
qplot(Year,..count..,data = Dataset,
geom = 'bar',main='Year wise records count')
CustomerBasedDataset = Dataset[,c(4,5,8,9,10,12,15,13,11,14,28,29,40)][!apply(Dataset[,14], 1, function(x) any(x=="" | is.na(x))),]
CustomerBasedDataset = CustomerBasedDataset[order(CustomerBasedDataset$`Customer name`,CustomerBasedDataset$`Month&Year`),]
repeatedCustRecIds = which(duplicated(CustomerBasedDataset$`Customer name`))
repeatedCustRecIds = sort(unique(c(repeatedCustRecIds,repeatedCustRecIds-1)))
CustomerBasedDataset_Repeated = CustomerBasedDataset[repeatedCustRecIds,]
NotifNoBasedDataset = Dataset[,c(4,5,8,9,10,12,13,15,11,14,28,29,40)][!apply(Dataset[,9], 1, function(x) any(x=="" | is.na(x))),]
NotifNoBasedDataset = NotifNoBasedDataset[order(NotifNoBasedDataset$`Notification no`,NotifNoBasedDataset$`Month&Year`),]
repeatedNotifNoIds = which(duplicated(NotifNoBasedDataset$`Notification no`))
repeatedNotifNoIds = sort(unique(c(repeatedNotifNoIds,repeatedNotifNoIds-1)))
NotifNoBasedDataset_Repeated = NotifNoBasedDataset[repeatedNotifNoIds,]
StateWiseDF_List = split(Dataset,f = Dataset$StateCorrected)
QuestionNoMissing_S1=StateWiseDF_List[[18]][,18:28][!apply(StateWiseDF_List[[18]][,18:28], 1, function(x) any(x=="" | is.na(x))),]
StateWiseDF_List[[18]]$StateCorrected[1]
require(corrplot)
require(RColorBrewer)
round(cor(QuestionNoMissing_S1[1:10]),2)
corrplot(cor(QuestionNoMissing_S1[1:10]), type="upper",
method = 'circle' ,order="hclust", add = F,
col=brewer.pal(n=4, name="RdBu"),
outline = T)
require(usdm)
vif(data.frame(QuestionNoMissing_S1[1:10]))
require(psych)
pca_s1 = principal(QuestionNoMissing_S1[1:10],nfactors = 10,rotate = 'none')
pca_s1
plot(pca_s1$values,type="b",col = barColour,
xlab = 'No of Principal Components',ylab = 'Engine Values',
main = 'Scree plot for all possible components') # Scree Plot
abline(h = 1,col='orangered')
pca_reduced_s1 = principal(QuestionNoMissing_S1[1:10], nfactors = 6, rotate = 'none')
pca_reduced_s1
pca_rotated_s1 = principal(QuestionNoMissing_S1[1:10], nfactors = 6, rotate = 'varimax')
pca_rotated_s1
round(pca_rotated_s1$r.scores,5) # all rotated factors are orthogonal
Scaled_Satindex=scale(QuestionNoMissing_S1[,11])
colnames(Scaled_Satindex)= c('Scaled_Satindex')
QuestionNoMissing_S1 = cbind(QuestionNoMissing_S1,pca_rotated_s1$scores,Scaled_Satindex)
formula_s1 = as.formula(paste("Scaled_Satindex ~",
paste(names(QuestionNoMissing_S1[12:17]), collapse = " + ")))
Linear_regression_s1 = lm(formula_s1,
data = QuestionNoMissing_S1)
summary(Linear_regression_s1)
plot(Linear_regression_s1)
require(plyr)
require(dplyr)
require(ggplot2)
require(readxl)
require(corrplot)
require(RColorBrewer)
require(usdm)
require(psych)
require(stringdist)
barColour = 'royalblue'
bgColour = 'gray75'
par(bg = bgColour)
require(readxl)
Dataset = read_excel('Workingdata.xlsx')
names(Dataset)
colnames(Dataset) = c(colnames(Dataset[,1:17]),'Q1','Q2','Q3','Q4','Q5','Q6','Q7','Q8','Q9','Q10',colnames(Dataset[,28]),'Remarks')
Missing_data_Check <- function(data_set){
NA_Count = sapply(data_set,function(y) sum(length(which(is.na(y)))))
Null_Count = sapply(data_set,function(y) sum(length(which(is.null(y)))))
Length0_Count = sapply(data_set,function(y) sum(length(which(length(y)==0))))
Empty_Count = sapply(data_set,function(y) sum(length(which(y==''))))
Total_NonData = NA_Count+Null_Count+Length0_Count+Empty_Count
return( Total_NonData )
}
Missing_Values = Missing_data_Check(Dataset)
ValuesBarPlot <- function(intVector,title){
Plot = barplot(intVector,col = barColour,
main = title,
xlab = '',ylab = "Missing count",xaxt = 'n')
text(x = Plot, y = intVector,
label = intVector,col = "red", cex = 0.8,font=2)
axis(1, at=Plot, labels=names(intVector),
tick=FALSE, las=2, line=-0.5, cex.axis=0.5)
}
ValuesBarPlot(Missing_Values,'Missing Values across all attributes')
ValuesBarPlot(Missing_Values[18:27],'Missing Values in Questions')
BarPlot <- function(dataset,i){
colnames(dataset) = c('X')
label = paste('Question ',i,collapse = '')
plot(factor(dataset$X),pch=i,xlab=label,col = barColour)
}
BoxPlot <- function(dataset,i){
colnames(dataset) = c('X')
label = paste('Question ',i,collapse = '')
boxplot(dataset$X,pch=i,xlab=label,col = barColour)
}
par(mfrow=c(2,5),oma=c(0,0,2,0))
for(i in 1:10){
BarPlot(Dataset[i+17],i)
}
title("Frequency Distribution for all 10 Questions",outer = T)
par(mfrow=c(1,1))
par(mfrow=c(2,5),oma=c(0,0,2,0))
for(i in 1:10){
BoxPlot(Dataset[i+17],i)
}
title("Box plots for all 10 Questions",outer = T)
par(mfrow=c(1,1))
barColour = 'royalblue'
bgColour = 'gray75'
par(bg = bgColour)
Dataset$Q1Factor = as.factor(ifelse(Dataset$Q1 %in% c(1,2,3),'NotSatisfied',
ifelse(Dataset$Q1 %in% c(4,5),'Satisfied',Dataset$Q1)))
Dataset$Q2Factor = as.factor(ifelse(Dataset$Q2 %in% c(1,2,3),'NotSatisfied',
ifelse(Dataset$Q2 %in% c(4,5),'Satisfied',Dataset$Q2)))
Dataset$Q3Factor = as.factor(ifelse(Dataset$Q3 %in% c(1,2,3),'NotSatisfied',
ifelse(Dataset$Q3 %in% c(4,5),'Satisfied',Dataset$Q3)))
Dataset$Q4Factor = as.factor(ifelse(Dataset$Q4 %in% c(1,2,3),'NotSatisfied',
ifelse(Dataset$Q4 %in% c(4,5),'Satisfied',Dataset$Q4)))
Dataset$Q5Factor = as.factor(ifelse(Dataset$Q5 %in% c(1,2,3),'NotSatisfied',
ifelse(Dataset$Q5 %in% c(4,5),'Satisfied',Dataset$Q5)))
Dataset$Q6Factor = as.factor(ifelse(Dataset$Q6 %in% c(1,2,3),'NotSatisfied',
ifelse(Dataset$Q6 %in% c(4,5),'Satisfied',Dataset$Q6)))
Dataset$Q7Factor = as.factor(ifelse(Dataset$Q7 %in% c(1,2,3),'NotSatisfied',
ifelse(Dataset$Q7 %in% c(4,5),'Satisfied',Dataset$Q7)))
Dataset$Q8Factor = as.factor(ifelse(Dataset$Q8 %in% c(1,2,3),'NotSatisfied',
ifelse(Dataset$Q8 %in% c(4,5),'Satisfied',Dataset$Q8)))
Dataset$Q9Factor = as.factor(ifelse(Dataset$Q9 %in% c(1,2,3),'NotSatisfied',
ifelse(Dataset$Q9 %in% c(4,5),'Satisfied',Dataset$Q9)))
Dataset$Q10Factor = as.factor(ifelse(Dataset$Q10 %in% c(1,2,3),'NotSatisfied',
ifelse(Dataset$Q10 %in% c(4,5),'Satisfied',Dataset$Q10)))
par(mfrow=c(2,5),oma=c(0,0,2,0))
for(i in 1:10){
BarPlot(Dataset[i+29],i)
}
title("Frequency Distribution for all 10 Factored Questions",outer = T)
par(mfrow=c(1,1))
QuestionNoMissing=Dataset[,18:28][!apply(Dataset[,18:28], 1, function(x) any(x=="" | is.na(x))),]
require(corrplot)
require(RColorBrewer)
round(cor(QuestionNoMissing[1:10]),2)
corrplot(cor(QuestionNoMissing[1:10]), type="upper",
method = 'circle' ,order="hclust", add = F,
col=brewer.pal(n=4, name="RdBu"),
outline = T)
require(usdm)
vif(data.frame(QuestionNoMissing[1:10]))
require(psych)
pca = principal(QuestionNoMissing[1:10],nfactors = 10,rotate = 'none')
pca
plot(pca$values,type="b",col = barColour,
xlab = 'No of Principal Components',ylab = 'Engine Values',
main = 'Scree plot for all possible components') # Scree Plot
abline(h = 1,col='orangered')
pca_reduced = principal(QuestionNoMissing[1:10], nfactors = 6, rotate = 'none')
pca_reduced
pca_rotated = principal(QuestionNoMissing[1:10], nfactors = 6, rotate = 'varimax')
pca_rotated
round(pca_rotated$r.scores,5) # all rotated factors are orthogonal
Scaled_Satindex=scale(QuestionNoMissing[,11])
colnames(Scaled_Satindex)= c('Scaled_Satindex')
QuestionNoMissing = cbind(QuestionNoMissing,pca_rotated$scores,Scaled_Satindex)
pca_reduced2 = principal(QuestionNoMissing[1:10], nfactors = 2, rotate = 'none')
pca_reduced2
pca_rotated2 = principal(QuestionNoMissing[1:10], nfactors = 2, rotate = 'varimax')
pca_rotated2
round(pca_rotated2$r.scores,5) # all rotated factors are orthogonal
QuestionNoMissing2 = cbind(QuestionNoMissing[1:11],pca_rotated2$scores,Scaled_Satindex)
formula = as.formula(paste("Scaled_Satindex ~",
paste(names(QuestionNoMissing[12:17]), collapse = " + ")))
Linear_regression = lm(formula,
data = QuestionNoMissing)
summary(Linear_regression)
plot(Linear_regression)
summary(Linear_regression2)
plot(Linear_regression2)
formula2 = as.formula(paste("Scaled_Satindex ~",
paste(names(QuestionNoMissing2[12:13]), collapse = " + ")))
Linear_regression2 = lm(formula2,
data = QuestionNoMissing2)
summary(Linear_regression2)
Dataset$StateCorrected = Dataset$State
Dataset[which(Dataset$StateCorrected == 'Chattisgarh'),'StateCorrected'] = 'Chhattisgarh'
Dataset[which(Dataset$StateCorrected == 'Orissa'),'StateCorrected'] = 'Odisha'
Dataset[which(Dataset$StateCorrected == 'W Bengal'),'StateCorrected'] = 'West Bengal'
Dataset[which(Dataset$StateCorrected == 'TN'),'StateCorrected'] = 'Tamil Nadu'
Dataset$StateCorrected = tolower(trimws(Dataset$StateCorrected))
Dataset$`City-final` = tolower(trimws(Dataset$`City-final`))
Dataset$City = tolower(trimws(Dataset$City))
Dataset$Location = tolower(trimws(Dataset$Location))
States_Cities = read_excel(path = 'Cities_States.xlsx')
States_Cities$`Name of City` = trimws(tolower(States_Cities$`Name of City`),which = 'both')
States_Cities$State = trimws(tolower(States_Cities$State),which = 'both')
Dataset$StateCorrected = trimws(tolower(Dataset$StateCorrected),which = 'both')
Dataset$Location = trimws(tolower(Dataset$Location),which = 'both')
require(readxl)
Locations_Assigned = read_excel(path = 'data/Cities_States.xlsx')
Locations_Missed = read_excel(path = 'data/Workingdata.xlsx',sheet = 'State_City_Missing')
Locations_Assigned$Location = tolower(trimws(Locations_Assigned$Location))
Locations_Missed$Location = tolower(trimws(Locations_Missed$Location))
require(stringdist)
DistanceNameMatrix<-matrix(NA, ncol = length(Locations_Missed$Location),
nrow = length(Locations_Assigned$Location))
for(i in 1:length(Locations_Missed$Location)) {
for(j in 1:length(Locations_Assigned$Location)) {
DistanceNameMatrix[j,i]<-stringdist(tolower(Locations_Missed[i,]$Location),
tolower(Locations_Assigned[j,]$Location),
method ='jw')
}
}
names(Dataset)
Dataset %>% group_by(`Planner Group code`)%>% count()
require(randomForest)
RF_model = randomForest(x = QuestionNoMissing[,1:10],
y = QuestionNoMissing$Satindex,
data_set = QuestionNoMissing,
ntree =  1500,
mtry =  4,
nodesize = 300)
require(plyr)
require(dplyr)
require(ggplot2)
require(readxl)
require(corrplot)
require(RColorBrewer)
require(usdm)
require(stringdist)
require(psych)
barColour = 'royalblue'
bgColour = 'gray75'
par(bg = bgColour)
require(readxl)
Dataset = read_excel('Workingdata.xlsx')
names(Dataset)
colnames(Dataset) = c(colnames(Dataset[,1:17]),'Q1','Q2','Q3','Q4','Q5','Q6','Q7','Q8','Q9','Q10',colnames(Dataset[,28]),'Remarks')
Missing_data_Check <- function(data_set){
NA_Count = sapply(data_set,function(y) sum(length(which(is.na(y)))))
Null_Count = sapply(data_set,function(y) sum(length(which(is.null(y)))))
Length0_Count = sapply(data_set,function(y) sum(length(which(length(y)==0))))
Empty_Count = sapply(data_set,function(y) sum(length(which(y==''))))
Total_NonData = NA_Count+Null_Count+Length0_Count+Empty_Count
return( Total_NonData )
}
Missing_Values = Missing_data_Check(Dataset)
Dataset$Q1Factor = as.factor(ifelse(Dataset$Q1 %in% c(1,2,3),'NotSatisfied',
ifelse(Dataset$Q1 %in% c(4,5),'Satisfied',Dataset$Q1)))
Dataset$Q2Factor = as.factor(ifelse(Dataset$Q2 %in% c(1,2,3),'NotSatisfied',
ifelse(Dataset$Q2 %in% c(4,5),'Satisfied',Dataset$Q2)))
Dataset$Q3Factor = as.factor(ifelse(Dataset$Q3 %in% c(1,2,3),'NotSatisfied',
ifelse(Dataset$Q3 %in% c(4,5),'Satisfied',Dataset$Q3)))
Dataset$Q4Factor = as.factor(ifelse(Dataset$Q4 %in% c(1,2,3),'NotSatisfied',
ifelse(Dataset$Q4 %in% c(4,5),'Satisfied',Dataset$Q4)))
Dataset$Q5Factor = as.factor(ifelse(Dataset$Q5 %in% c(1,2,3),'NotSatisfied',
ifelse(Dataset$Q5 %in% c(4,5),'Satisfied',Dataset$Q5)))
Dataset$Q6Factor = as.factor(ifelse(Dataset$Q6 %in% c(1,2,3),'NotSatisfied',
ifelse(Dataset$Q6 %in% c(4,5),'Satisfied',Dataset$Q6)))
Dataset$Q7Factor = as.factor(ifelse(Dataset$Q7 %in% c(1,2,3),'NotSatisfied',
ifelse(Dataset$Q7 %in% c(4,5),'Satisfied',Dataset$Q7)))
Dataset$Q8Factor = as.factor(ifelse(Dataset$Q8 %in% c(1,2,3),'NotSatisfied',
ifelse(Dataset$Q8 %in% c(4,5),'Satisfied',Dataset$Q8)))
Dataset$Q9Factor = as.factor(ifelse(Dataset$Q9 %in% c(1,2,3),'NotSatisfied',
ifelse(Dataset$Q9 %in% c(4,5),'Satisfied',Dataset$Q9)))
Dataset$Q10Factor = as.factor(ifelse(Dataset$Q10 %in% c(1,2,3),'NotSatisfied',
ifelse(Dataset$Q10 %in% c(4,5),'Satisfied',Dataset$Q10)))
par(mfrow=c(2,5),oma=c(0,0,2,0))
for(i in 1:10){
BarPlot(Dataset[i+29],i)
}
title("Frequency Distribution for all 10 Factored Questions",outer = T)
par(mfrow=c(1,1))
QuestionNoMissing=Dataset[,18:28][!apply(Dataset[,18:28], 1, function(x) any(x=="" | is.na(x))),]
require(corrplot)
require(RColorBrewer)
round(cor(QuestionNoMissing[1:10]),2)
require(randomForest)
RF_model = randomForest(x = QuestionNoMissing[,1:10],
y = QuestionNoMissing$Satindex,
data_set = QuestionNoMissing,
ntree =  1500,
mtry =  4,
nodesize = 300)
plot(RF_model, main = "High number of trees vs OOB error")
require(caret)
set.seed(123)
grid_RF_tune = train(x = QuestionNoMissing[,1:10],
y = QuestionNoMissing$Satindex,
method = 'rf')
vif(data.frame(QuestionNoMissing_L[1:10]))
vif(QuestionNoMissing)
vif(QuestionNoMissing[1:10])
names(QuestionNoMissing)
vif(QuestionNoMissing[1:2])
vif(QuestionNoMissing[,1:2])
vif(data.frame(QuestionNoMissing[1:2]))
vif(data.frame(QuestionNoMissing[1:10]))
require(plyr)
require(dplyr)
require(ggplot2)
require(readxl)
require(corrplot)
require(RColorBrewer)
require(usdm)
require(psych)
require(stringdist)
barColour = 'royalblue'
bgColour = 'gray75'
par(bg = bgColour)
require(readxl)
Dataset = read_excel('Workingdata.xlsx')
names(Dataset)
colnames(Dataset) = c(colnames(Dataset[,1:17]),'Q1','Q2','Q3','Q4','Q5','Q6','Q7','Q8','Q9','Q10',colnames(Dataset[,28]),'Remarks')
Missing_data_Check <- function(data_set){
NA_Count = sapply(data_set,function(y) sum(length(which(is.na(y)))))
Null_Count = sapply(data_set,function(y) sum(length(which(is.null(y)))))
Length0_Count = sapply(data_set,function(y) sum(length(which(length(y)==0))))
Empty_Count = sapply(data_set,function(y) sum(length(which(y==''))))
Total_NonData = NA_Count+Null_Count+Length0_Count+Empty_Count
return( Total_NonData )
}
Missing_Values = Missing_data_Check(Dataset)
ValuesBarPlot <- function(intVector,title){
Plot = barplot(intVector,col = barColour,
main = title,
xlab = '',ylab = "Missing count",xaxt = 'n')
text(x = Plot, y = intVector,
label = intVector,col = "red", cex = 0.8,font=2)
axis(1, at=Plot, labels=names(intVector),
tick=FALSE, las=2, line=-0.5, cex.axis=0.5)
}
ValuesBarPlot(Missing_Values,'Missing Values across all attributes')
ValuesBarPlot(Missing_Values[18:27],'Missing Values in Questions')
BarPlot <- function(dataset,i){
colnames(dataset) = c('X')
label = paste('Question ',i,collapse = '')
plot(factor(dataset$X),pch=i,xlab=label,col = barColour)
}
BoxPlot <- function(dataset,i){
colnames(dataset) = c('X')
label = paste('Question ',i,collapse = '')
boxplot(dataset$X,pch=i,xlab=label,col = barColour)
}
par(mfrow=c(2,5),oma=c(0,0,2,0))
for(i in 1:10){
BarPlot(Dataset[i+17],i)
}
title("Frequency Distribution for all 10 Questions",outer = T)
require(readxl)
Dataset = read_excel('Workingdata.xlsx')
names(Dataset)
colnames(Dataset) = c(colnames(Dataset[,1:17]),'Q1','Q2','Q3','Q4','Q5','Q6','Q7','Q8','Q9','Q10',colnames(Dataset[,28]),'Remarks')
Dataset$Q1Factor = as.factor(ifelse(Dataset$Q1 %in% c(1,2,3),'NotSatisfied',
ifelse(Dataset$Q1 %in% c(4,5),'Satisfied',Dataset$Q1)))
Dataset$Q2Factor = as.factor(ifelse(Dataset$Q2 %in% c(1,2,3),'NotSatisfied',
ifelse(Dataset$Q2 %in% c(4,5),'Satisfied',Dataset$Q2)))
Dataset$Q3Factor = as.factor(ifelse(Dataset$Q3 %in% c(1,2,3),'NotSatisfied',
ifelse(Dataset$Q3 %in% c(4,5),'Satisfied',Dataset$Q3)))
Dataset$Q4Factor = as.factor(ifelse(Dataset$Q4 %in% c(1,2,3),'NotSatisfied',
ifelse(Dataset$Q4 %in% c(4,5),'Satisfied',Dataset$Q4)))
Dataset$Q5Factor = as.factor(ifelse(Dataset$Q5 %in% c(1,2,3),'NotSatisfied',
ifelse(Dataset$Q5 %in% c(4,5),'Satisfied',Dataset$Q5)))
Dataset$Q6Factor = as.factor(ifelse(Dataset$Q6 %in% c(1,2,3),'NotSatisfied',
ifelse(Dataset$Q6 %in% c(4,5),'Satisfied',Dataset$Q6)))
Dataset$Q7Factor = as.factor(ifelse(Dataset$Q7 %in% c(1,2,3),'NotSatisfied',
ifelse(Dataset$Q7 %in% c(4,5),'Satisfied',Dataset$Q7)))
Dataset$Q8Factor = as.factor(ifelse(Dataset$Q8 %in% c(1,2,3),'NotSatisfied',
ifelse(Dataset$Q8 %in% c(4,5),'Satisfied',Dataset$Q8)))
Dataset$Q9Factor = as.factor(ifelse(Dataset$Q9 %in% c(1,2,3),'NotSatisfied',
ifelse(Dataset$Q9 %in% c(4,5),'Satisfied',Dataset$Q9)))
Dataset$Q10Factor = as.factor(ifelse(Dataset$Q10 %in% c(1,2,3),'NotSatisfied',
ifelse(Dataset$Q10 %in% c(4,5),'Satisfied',Dataset$Q10)))
par(mfrow=c(2,5),oma=c(0,0,2,0))
for(i in 1:10){
BarPlot(Dataset[i+29],i)
}
title("Frequency Distribution for all 10 Factored Questions",outer = T)
par(mfrow=c(1,1))
QuestionNoMissing=Dataset[,18:28][!apply(Dataset[,18:28], 1, function(x) any(x=="" | is.na(x))),]
require(corrplot)
require(RColorBrewer)
round(cor(QuestionNoMissing[1:10]),2)
corrplot(cor(QuestionNoMissing[1:10]), type="upper",
method = 'circle' ,order="hclust", add = F,
col=brewer.pal(n=4, name="RdBu"),
outline = T)
require(usdm)
vif(data.frame(QuestionNoMissing[1:10]))
QuestionNoMissing_Sq= QuestionNoMissing[1:10]*QuestionNoMissing[1:10]
dim(QuestionNoMissing[1:10]))
dim(QuestionNoMissing[1:10])
dim(QuestionNoMissing_Sq)
head(QuestionNoMissing[1:10])
head(QuestionNoMissing_Sq)
vif(data.frame(QuestionNoMissing_Sq))
vif(data.frame(QuestionNoMissing[1:10]))
pca = principal(QuestionNoMissing_Sq,nfactors = 10,rotate = 'none')
pca
require(tidyverse)
y = QuestionNoMissing$Satindex
x = QuestionNoMissing %>%
dplyr::select(Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q8,Q9,Q10) %>%
data.matrix()
require(glmnet)
Lasso_regression = glmnet(x,y,alpha = 1)
summary(Lasso_regression)
Lasso_CV = cv.glmnet(x,y,alpha = 1)
plot(Lasso_CV)
lambda_min = Lasso_CV$lambda.min
lambda_min
Lasso_regression_lam = glmnet(x,y,alpha = 1,lambda = lambda_min)
Lasso_regression_lam$beta
a=Lasso_regression_lam$beta
y = QuestionNoMissing$Satindex
x = QuestionNoMissing %>%
dplyr::select(Q1^2,Q2^2,Q3^2,Q4^2,Q5^2,Q6^2,Q7^2,Q8^2,Q9^2,Q10^2) %>%
data.matrix()
x = QuestionNoMissing %>%
dplyr::select(Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q8,Q9,Q10) %>%
data.matrix()
class(x)
head(x)
head(x*x)
Lasso_regression = glmnet(x*x,y,alpha = 1)
summary(Lasso_regression)
plot(Lasso_regression)
Lasso_CV = cv.glmnet(x,y,alpha = 1)
plot(Lasso_CV)
lambda_min = Lasso_CV$lambda.min
lambda_min
Lasso_CV = cv.glmnet(x*x,y,alpha = 1)
plot(Lasso_CV)
lambda_min = Lasso_CV$lambda.min
lambda_min
Lasso_regression_lam = glmnet(x*x,y,alpha = 1,lambda = lambda_min)
Lasso_regression_lam$beta
a
data.frame(Lasso_regression_lam$beta,a)
